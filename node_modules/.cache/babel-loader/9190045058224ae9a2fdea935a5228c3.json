{"ast":null,"code":"import { Buffer } from 'buffer';\nimport { sha512 } from '@noble/hashes/sha512';\nimport * as ed25519 from '@noble/ed25519';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { serialize, deserialize, deserializeUnchecked } from 'borsh';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport { blob } from '@solana/buffer-layout';\nimport { toBigIntLE, toBufferLE } from 'bigint-buffer';\nimport { coerce, instance, string, tuple, literal, unknown, union, type, optional, any, number, array, nullable, create, boolean, record, assert as assert$1 } from 'superstruct';\nimport { Client } from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport sha3 from 'js-sha3';\nimport { hmac } from '@noble/hashes/hmac';\nimport * as secp256k1 from '@noble/secp256k1';\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\n\ned25519.utils.sha512Sync = function () {\n  return sha512(ed25519.utils.concatBytes(...arguments));\n};\n\nconst generatePrivateKey = ed25519.utils.randomPrivateKey;\n\nconst generateKeypair = () => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey\n  };\n};\n\nconst getPublicKey = ed25519.sync.getPublicKey;\n\nfunction isOnCurve(publicKey) {\n  try {\n    ed25519.Point.fromHex(publicKey, true\n    /* strict */\n    );\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nconst sign = (message, secretKey) => ed25519.sync.sign(message, secretKey.slice(0, 32));\n\nconst verify = ed25519.sync.verify;\n\nconst toBuffer = arr => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n\nclass Struct {\n  constructor(properties) {\n    Object.assign(this, properties);\n  }\n\n  encode() {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data) {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data) {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n\n} // Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\n\n\nclass Enum extends Struct {\n  constructor(properties) {\n    super(properties);\n    this.enum = '';\n\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n\n}\n\nconst SOLANA_SCHEMA = new Map();\n/**\n * Maximum length of derived pubkey seed\n */\n\nconst MAX_SEED_LENGTH = 32;\n/**\n * Size of public key in bytes\n */\n\nconst PUBLIC_KEY_LENGTH = 32;\n/**\n * Value to be converted into public key\n */\n\nfunction isPublicKeyData(value) {\n  return value._bn !== undefined;\n}\n/**\n * A public key\n */\n\n\nclass PublicKey extends Struct {\n  /** @internal */\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value) {\n    super({});\n    this._bn = void 0;\n\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n  /**\n   * Default public key value. (All zeros)\n   */\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n\n\n  equals(publicKey) {\n    return this._bn.eq(publicKey._bn);\n  }\n  /**\n   * Return the base-58 representation of the public key\n   */\n\n\n  toBase58() {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON() {\n    return this.toBase58();\n  }\n  /**\n   * Return the byte array representation of the public key\n   */\n\n\n  toBytes() {\n    return this.toBuffer();\n  }\n  /**\n   * Return the Buffer representation of the public key\n   */\n\n\n  toBuffer() {\n    const b = this._bn.toArrayLike(Buffer);\n\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n  /**\n   * Return the base-58 representation of the public key\n   */\n\n\n  toString() {\n    return this.toBase58();\n  }\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n\n  /* eslint-disable require-await */\n\n\n  static async createWithSeed(fromPublicKey, seed, programId) {\n    const buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n\n  /* eslint-disable require-await */\n\n\n  static createProgramAddressSync(seeds, programId) {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([buffer, programId.toBuffer(), Buffer.from('ProgramDerivedAddress')]);\n    const publicKeyBytes = sha256(buffer);\n\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n\n    return new PublicKey(publicKeyBytes);\n  }\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   */\n\n  /* eslint-disable require-await */\n\n\n  static async createProgramAddress(seeds, programId) {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n\n\n  static findProgramAddressSync(seeds, programId) {\n    let nonce = 255;\n    let address;\n\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n\n        nonce--;\n        continue;\n      }\n\n      return [address, nonce];\n    }\n\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   */\n\n\n  static async findProgramAddress(seeds, programId) {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n\n\n  static isOnCurve(pubkeyData) {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n\n}\n\nPublicKey.default = new PublicKey('11111111111111111111111111111111');\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']]\n});\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\n\nclass Account {\n  /** @internal */\n\n  /** @internal */\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey) {\n    this._publicKey = void 0;\n    this._secretKey = void 0;\n\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n  /**\n   * The public key for this account\n   */\n\n\n  get publicKey() {\n    return new PublicKey(this._publicKey);\n  }\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n\n\n  get secretKey() {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n\n}\n\nconst BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\n\nconst PACKET_DATA_SIZE = 1280 - 40 - 8;\nconst VERSION_PREFIX_MASK = 0x7f;\nconst SIGNATURE_LENGTH_IN_BYTES = 64;\n\nclass TransactionExpiredBlockheightExceededError extends Error {\n  constructor(signature) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n\n}\n\nObject.defineProperty(TransactionExpiredBlockheightExceededError.prototype, 'name', {\n  value: 'TransactionExpiredBlockheightExceededError'\n});\n\nclass TransactionExpiredTimeoutError extends Error {\n  constructor(signature, timeoutSeconds) {\n    super(`Transaction was not confirmed in ${timeoutSeconds.toFixed(2)} seconds. It is ` + 'unknown if it succeeded or failed. Check signature ' + `${signature} using the Solana Explorer or CLI tools.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError'\n});\n/**\n * Layout for a public key\n */\n\nconst publicKey = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'publicKey';\n  return BufferLayout.blob(32, property);\n};\n/**\n * Layout for a signature\n */\n\n\nconst signature = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'signature';\n  return BufferLayout.blob(64, property);\n};\n/**\n * Layout for a Rust String type\n */\n\n\nconst rustString = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'string';\n  const rsl = BufferLayout.struct([BufferLayout.u32('length'), BufferLayout.u32('lengthPadding'), BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars')], property);\n\n  const _decode = rsl.decode.bind(rsl);\n\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl;\n\n  rslShim.decode = (b, offset) => {\n    const data = _decode(b, offset);\n\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str, b, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8')\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = str => {\n    return BufferLayout.u32().span + BufferLayout.u32().span + Buffer.from(str, 'utf8').length;\n  };\n\n  return rslShim;\n};\n/**\n * Layout for an Authorized object\n */\n\n\nconst authorized = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'authorized';\n  return BufferLayout.struct([publicKey('staker'), publicKey('withdrawer')], property);\n};\n/**\n * Layout for a Lockup object\n */\n\n\nconst lockup = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'lockup';\n  return BufferLayout.struct([BufferLayout.ns64('unixTimestamp'), BufferLayout.ns64('epoch'), publicKey('custodian')], property);\n};\n/**\n *  Layout for a VoteInit object\n */\n\n\nconst voteInit = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'voteInit';\n  return BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedVoter'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission')], property);\n};\n\nfunction getAlloc(type, fields) {\n  const getItemAlloc = item => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } // Couldn't determine allocated size of layout\n\n\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach(item => {\n    alloc += getItemAlloc(item);\n  });\n  return alloc;\n}\n\nfunction decodeLength(bytes) {\n  let len = 0;\n  let size = 0;\n\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << size * 7;\n    size += 1;\n\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n\n  return len;\n}\n\nfunction encodeLength(bytes, len) {\n  let rem_len = len;\n\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n/**\n * List of instructions to be processed atomically\n */\n\n\nclass Message {\n  constructor(args) {\n    this.header = void 0;\n    this.accountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.instructions = void 0;\n    this.indexToProgramIds = new Map();\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix => this.indexToProgramIds.set(ix.programIdIndex, this.accountKeys[ix.programIdIndex]));\n  }\n\n  get version() {\n    return 'legacy';\n  }\n\n  get staticAccountKeys() {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions() {\n    return this.instructions.map(ix => ({\n      programIdIndex: ix.programIdIndex,\n      accountKeyIndexes: ix.accounts,\n      data: bs58.decode(ix.data)\n    }));\n  }\n\n  get addressTableLookups() {\n    return [];\n  }\n\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index) {\n    return index < this.header.numRequiredSignatures - this.header.numReadonlySignedAccounts || index >= this.header.numRequiredSignatures && index < this.accountKeys.length - this.header.numReadonlyUnsignedAccounts;\n  }\n\n  isProgramId(index) {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds() {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds() {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize() {\n    const numKeys = this.accountKeys.length;\n    let keyCount = [];\n    encodeLength(keyCount, numKeys);\n    const instructions = this.instructions.map(instruction => {\n      const {\n        accounts,\n        programIdIndex\n      } = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n      let keyIndicesCount = [];\n      encodeLength(keyIndicesCount, accounts.length);\n      let dataCount = [];\n      encodeLength(dataCount, data.length);\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data\n      };\n    });\n    let instructionCount = [];\n    encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(instruction.keyIndicesCount.length, 'keyIndicesCount'), BufferLayout.seq(BufferLayout.u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), BufferLayout.blob(instruction.dataLength.length, 'dataLength'), BufferLayout.seq(BufferLayout.u8('userdatum'), instruction.data.length, 'data')]);\n      const length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n    const signDataLayout = BufferLayout.struct([BufferLayout.blob(1, 'numRequiredSignatures'), BufferLayout.blob(1, 'numReadonlySignedAccounts'), BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'), BufferLayout.blob(keyCount.length, 'keyCount'), BufferLayout.seq(publicKey('key'), numKeys, 'keys'), publicKey('recentBlockhash')]);\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([this.header.numReadonlySignedAccounts]),\n      numReadonlyUnsignedAccounts: Buffer.from([this.header.numReadonlyUnsignedAccounts]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash)\n    };\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n  /**\n   * Decode a compiled message into a Message object.\n   */\n\n\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const numRequiredSignatures = byteArray.shift();\n\n    if (numRequiredSignatures !== (numRequiredSignatures & VERSION_PREFIX_MASK)) {\n      throw new Error('Versioned messages must be deserialized with VersionedMessage.deserialize()');\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift();\n    const numReadonlyUnsignedAccounts = byteArray.shift();\n    const accountCount = decodeLength(byteArray);\n    let accountKeys = [];\n\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n    const instructionCount = decodeLength(byteArray);\n    let instructions = [];\n\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift();\n      const accountCount = decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions\n    };\n    return new Message(messageArgs);\n  }\n\n}\n\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n/**\n * Message constructor arguments\n */\n\n\nclass MessageV0 {\n  constructor(args) {\n    this.header = void 0;\n    this.staticAccountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.compiledInstructions = void 0;\n    this.addressTableLookups = void 0;\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version() {\n    return 0;\n  }\n\n  serialize() {\n    const encodedStaticAccountKeysLength = Array();\n    encodeLength(encodedStaticAccountKeysLength, this.staticAccountKeys.length);\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array();\n    encodeLength(encodedInstructionsLength, this.compiledInstructions.length);\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array();\n    encodeLength(encodedAddressTableLookupsLength, this.addressTableLookups.length);\n    const messageLayout = BufferLayout.struct([BufferLayout.u8('prefix'), BufferLayout.struct([BufferLayout.u8('numRequiredSignatures'), BufferLayout.u8('numReadonlySignedAccounts'), BufferLayout.u8('numReadonlyUnsignedAccounts')], 'header'), BufferLayout.blob(encodedStaticAccountKeysLength.length, 'staticAccountKeysLength'), BufferLayout.seq(publicKey(), this.staticAccountKeys.length, 'staticAccountKeys'), publicKey('recentBlockhash'), BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'), BufferLayout.blob(serializedInstructions.length, 'serializedInstructions'), BufferLayout.blob(encodedAddressTableLookupsLength.length, 'addressTableLookupsLength'), BufferLayout.blob(serializedAddressTableLookups.length, 'serializedAddressTableLookups')]);\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode({\n      prefix: MESSAGE_VERSION_0_PREFIX,\n      header: this.header,\n      staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n      staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n      instructionsLength: new Uint8Array(encodedInstructionsLength),\n      serializedInstructions,\n      addressTableLookupsLength: new Uint8Array(encodedAddressTableLookupsLength),\n      serializedAddressTableLookups\n    }, serializedMessage);\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  serializeInstructions() {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array();\n      encodeLength(encodedAccountKeyIndexesLength, instruction.accountKeyIndexes.length);\n      const encodedDataLength = Array();\n      encodeLength(encodedDataLength, instruction.data.length);\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(encodedAccountKeyIndexesLength.length, 'encodedAccountKeyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), instruction.accountKeyIndexes.length, 'accountKeyIndexes'), BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'), BufferLayout.blob(instruction.data.length, 'data')]);\n      serializedLength += instructionLayout.encode({\n        programIdIndex: instruction.programIdIndex,\n        encodedAccountKeyIndexesLength: new Uint8Array(encodedAccountKeyIndexesLength),\n        accountKeyIndexes: instruction.accountKeyIndexes,\n        encodedDataLength: new Uint8Array(encodedDataLength),\n        data: instruction.data\n      }, serializedInstructions, serializedLength);\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  serializeAddressTableLookups() {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array();\n      encodeLength(encodedWritableIndexesLength, lookup.writableIndexes.length);\n      const encodedReadonlyIndexesLength = Array();\n      encodeLength(encodedReadonlyIndexesLength, lookup.readonlyIndexes.length);\n      const addressTableLookupLayout = BufferLayout.struct([publicKey('accountKey'), BufferLayout.blob(encodedWritableIndexesLength.length, 'encodedWritableIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.writableIndexes.length, 'writableIndexes'), BufferLayout.blob(encodedReadonlyIndexesLength.length, 'encodedReadonlyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.readonlyIndexes.length, 'readonlyIndexes')]);\n      serializedLength += addressTableLookupLayout.encode({\n        accountKey: lookup.accountKey.toBytes(),\n        encodedWritableIndexesLength: new Uint8Array(encodedWritableIndexesLength),\n        writableIndexes: lookup.writableIndexes,\n        encodedReadonlyIndexesLength: new Uint8Array(encodedReadonlyIndexesLength),\n        readonlyIndexes: lookup.readonlyIndexes\n      }, serializedAddressTableLookups, serializedLength);\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage) {\n    let byteArray = [...serializedMessage];\n    const prefix = byteArray.shift();\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(prefix !== maskedPrefix, `Expected versioned message but received legacy message`);\n    const version = maskedPrefix;\n    assert(version === 0, `Expected versioned message with version 0 but found version ${version}`);\n    const header = {\n      numRequiredSignatures: byteArray.shift(),\n      numReadonlySignedAccounts: byteArray.shift(),\n      numReadonlyUnsignedAccounts: byteArray.shift()\n    };\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = decodeLength(byteArray);\n\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)));\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n    const instructionCount = decodeLength(byteArray);\n    const compiledInstructions = [];\n\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift();\n      const accountKeyIndexesLength = decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data\n      });\n    }\n\n    const addressTableLookupsCount = decodeLength(byteArray);\n    const addressTableLookups = [];\n\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups\n    });\n  }\n\n} // eslint-disable-next-line no-redeclare\n\n\nconst VersionedMessage = {\n  deserializeMessageVersion(serializedMessage) {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK; // if the highest bit of the prefix is not set, the message is not versioned\n\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    } // the lower 7 bits of the prefix indicate the message version\n\n\n    return maskedPrefix;\n  },\n\n  deserialize: serializedMessage => {\n    const version = VersionedMessage.deserializeMessageVersion(serializedMessage);\n\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(`Transaction message version ${version} deserialization is not supported`);\n    }\n  }\n};\n/**\n * Transaction signature as base-58 encoded string\n */\n\nlet TransactionStatus;\n/**\n * Default (empty) signature\n */\n\n(function (TransactionStatus) {\n  TransactionStatus[TransactionStatus[\"BLOCKHEIGHT_EXCEEDED\"] = 0] = \"BLOCKHEIGHT_EXCEEDED\";\n  TransactionStatus[TransactionStatus[\"PROCESSED\"] = 1] = \"PROCESSED\";\n  TransactionStatus[TransactionStatus[\"TIMED_OUT\"] = 2] = \"TIMED_OUT\";\n})(TransactionStatus || (TransactionStatus = {}));\n\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n/**\n * Account metadata used to define instructions\n */\n\n/**\n * Transaction Instruction class\n */\n\nclass TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n\n  /**\n   * Program Id to execute\n   */\n\n  /**\n   * Program input\n   */\n  constructor(opts) {\n    this.keys = void 0;\n    this.programId = void 0;\n    this.data = Buffer.alloc(0);\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  toJSON() {\n    return {\n      keys: this.keys.map(_ref => {\n        let {\n          pubkey,\n          isSigner,\n          isWritable\n        } = _ref;\n        return {\n          pubkey: pubkey.toJSON(),\n          isSigner,\n          isWritable\n        };\n      }),\n      programId: this.programId.toJSON(),\n      data: [...this.data]\n    };\n  }\n\n}\n/**\n * Pair of signature and corresponding public key\n */\n\n/**\n * Transaction class\n */\n\n\nclass Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature() {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n\n    return null;\n  }\n  /**\n   * The transaction fee payer\n   */\n\n  /**\n   * Construct an empty Transaction\n   */\n\n\n  constructor(opts) {\n    this.signatures = [];\n    this.feePayer = void 0;\n    this.instructions = [];\n    this.recentBlockhash = void 0;\n    this.lastValidBlockHeight = void 0;\n    this.nonceInfo = void 0;\n    this._message = void 0;\n    this._json = void 0;\n\n    if (!opts) {\n      return;\n    }\n\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n\n    if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      const {\n        blockhash,\n        lastValidBlockHeight\n      } = opts;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {\n        recentBlockhash,\n        nonceInfo\n      } = opts;\n\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  toJSON() {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo ? {\n        nonce: this.nonceInfo.nonce,\n        nonceInstruction: this.nonceInfo.nonceInstruction.toJSON()\n      } : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(_ref2 => {\n        let {\n          publicKey\n        } = _ref2;\n        return publicKey.toJSON();\n      })\n    };\n  }\n  /**\n   * Add one or more instructions to this Transaction\n   */\n\n\n  add() {\n    for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {\n      items[_key] = arguments[_key];\n    }\n\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach(item => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n  /**\n   * Compile transaction data\n   */\n\n\n  compileMessage() {\n    if (this._message && JSON.stringify(this.toJSON()) === JSON.stringify(this._json)) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions;\n\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer;\n\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(`Transaction instruction index ${i} has undefined program id`);\n      }\n    }\n\n    const programIds = [];\n    const accountMetas = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({ ...accountMeta\n        });\n      });\n      const programId = instruction.programId.toString();\n\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    }); // Append programID account metas\n\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false\n      });\n    }); // Cull duplicate account metas\n\n    const uniqueMetas = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner = uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    }); // Sort. Prioritizing first by signer, then by writable\n\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      } // Otherwise, sort by pubkey, stringwise.\n\n\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    }); // Move fee payer to the front\n\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true\n      });\n    } // Disallow unknown signers\n\n\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0; // Split out signing from non-signing keys and count header values\n\n    const signedKeys = [];\n    const unsignedKeys = [];\n    uniqueMetas.forEach(_ref3 => {\n      let {\n        pubkey,\n        isSigner,\n        isWritable\n      } = _ref3;\n\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions = instructions.map(instruction => {\n      const {\n        data,\n        programId\n      } = instruction;\n      return {\n        programIdIndex: accountKeys.indexOf(programId.toString()),\n        accounts: instruction.keys.map(meta => accountKeys.indexOf(meta.pubkey.toString())),\n        data: bs58.encode(data)\n      };\n    });\n    compiledInstructions.forEach(instruction => {\n      assert(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => assert(keyIndex >= 0));\n    });\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  _compile() {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n    return message;\n  }\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n\n\n  serializeMessage() {\n    return this._compile().serialize();\n  }\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n\n\n  async getEstimatedFee(connection) {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n\n\n  setSigners() {\n    for (var _len2 = arguments.length, signers = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      signers[_key2] = arguments[_key2];\n    }\n\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers.filter(publicKey => {\n      const key = publicKey.toString();\n\n      if (seen.has(key)) {\n        return false;\n      } else {\n        seen.add(key);\n        return true;\n      }\n    }).map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n  }\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n\n\n  sign() {\n    for (var _len3 = arguments.length, signers = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      signers[_key3] = arguments[_key3];\n    }\n\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    } // Dedupe signers\n\n\n    const seen = new Set();\n    const uniqueSigners = [];\n\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey\n    }));\n\n    const message = this._compile();\n\n    this._partialSign(message, ...uniqueSigners);\n  }\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n\n\n  partialSign() {\n    for (var _len4 = arguments.length, signers = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      signers[_key4] = arguments[_key4];\n    }\n\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    } // Dedupe signers\n\n\n    const seen = new Set();\n    const uniqueSigners = [];\n\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n\n    this._partialSign(message, ...uniqueSigners);\n  }\n  /**\n   * @internal\n   */\n\n\n  _partialSign(message) {\n    const signData = message.serialize();\n\n    for (var _len5 = arguments.length, signers = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n      signers[_key5 - 1] = arguments[_key5];\n    }\n\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n\n\n  addSignature(pubkey, signature) {\n    this._compile(); // Ensure signatures array is populated\n\n\n    this._addSignature(pubkey, signature);\n  }\n  /**\n   * @internal\n   */\n\n\n  _addSignature(pubkey, signature) {\n    assert(signature.length === 64);\n    const index = this.signatures.findIndex(sigpair => pubkey.equals(sigpair.publicKey));\n\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n\n\n  verifySignatures() {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n  /**\n   * @internal\n   */\n\n\n  _verifySignatures(signData, requireAllSignatures) {\n    for (const {\n      signature,\n      publicKey\n    } of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBuffer())) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n\n\n  serialize(config) {\n    const {\n      requireAllSignatures,\n      verifySignatures\n    } = Object.assign({\n      requireAllSignatures: true,\n      verifySignatures: true\n    }, config);\n    const signData = this.serializeMessage();\n\n    if (verifySignatures && !this._verifySignatures(signData, requireAllSignatures)) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n  /**\n   * @internal\n   */\n\n\n  _serialize(signData) {\n    const {\n      signatures\n    } = this;\n    const signatureCount = [];\n    encodeLength(signatureCount, signatures.length);\n    const transactionLength = signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    assert(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach((_ref4, index) => {\n      let {\n        signature\n      } = _ref4;\n\n      if (signature !== null) {\n        assert(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(wireTransaction, signatureCount.length + index * 64);\n      }\n    });\n    signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);\n    assert(wireTransaction.length <= PACKET_DATA_SIZE, `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`);\n    return wireTransaction;\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n\n  get keys() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n\n  get programId() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n\n  get data() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n\n\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const signatureCount = decodeLength(byteArray);\n    let signatures = [];\n\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n  /**\n   * Populate Transaction object from message and signatures\n   */\n\n\n  static populate(message) {\n    let signatures = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature: signature == bs58.encode(DEFAULT_SIGNATURE) ? null : bs58.decode(signature),\n        publicKey: message.accountKeys[index]\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(keyObj => keyObj.publicKey.toString() === pubkey.toString()) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account)\n        };\n      });\n      transaction.instructions.push(new TransactionInstruction({\n        keys,\n        programId: message.accountKeys[instruction.programIdIndex],\n        data: bs58.decode(instruction.data)\n      }));\n    });\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n    return transaction;\n  }\n\n}\n/**\n * Versioned transaction class\n */\n\n\nclass VersionedTransaction {\n  constructor(message, signatures) {\n    this.signatures = void 0;\n    this.message = void 0;\n\n    if (signatures !== undefined) {\n      assert(signatures.length === message.header.numRequiredSignatures, 'Expected signatures length to be equal to the number of required signatures');\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n\n      this.signatures = defaultSignatures;\n    }\n\n    this.message = message;\n  }\n\n  serialize() {\n    const serializedMessage = this.message.serialize();\n    const encodedSignaturesLength = Array();\n    encodeLength(encodedSignaturesLength, this.signatures.length);\n    const transactionLayout = BufferLayout.struct([BufferLayout.blob(encodedSignaturesLength.length, 'encodedSignaturesLength'), BufferLayout.seq(signature(), this.signatures.length, 'signatures'), BufferLayout.blob(serializedMessage.length, 'serializedMessage')]);\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode({\n      encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n      signatures: this.signatures,\n      serializedMessage\n    }, serializedTransaction);\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction) {\n    let byteArray = [...serializedTransaction];\n    const signatures = [];\n    const signaturesLength = decodeLength(byteArray);\n\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)));\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(signer.publicKey));\n      assert(signerIndex >= 0, `Cannot sign with non signer key ${signer.publicKey.toBase58()}`);\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n}\n\nconst SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');\nconst SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey('SysvarEpochSchedu1e111111111111111111111111');\nconst SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');\nconst SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');\nconst SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');\nconst SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');\nconst SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey('SysvarS1otHashes111111111111111111111111111');\nconst SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey('SysvarS1otHistory11111111111111111111111111');\nconst SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\nasync function sendAndConfirmTransaction(connection, transaction, signers, options) {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendTransaction(transaction, signers, sendOptions);\n  const status = transaction.recentBlockhash != null && transaction.lastValidBlockHeight != null ? (await connection.confirmTransaction({\n    signature: signature,\n    blockhash: transaction.recentBlockhash,\n    lastValidBlockHeight: transaction.lastValidBlockHeight\n  }, options && options.commitment)).value : (await connection.confirmTransaction(signature, options && options.commitment)).value;\n\n  if (status.err) {\n    throw new Error(`Transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n\n  return signature;\n} // zzz\n\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\n\n\nfunction encodeData(type, fields) {\n  const allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({\n    instruction: type.index\n  }, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\n\n\nfunction decodeData$1(type, buffer) {\n  let data;\n\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(`invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`);\n  }\n\n  return data;\n}\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\n\n\nconst FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\n\nconst NonceAccountLayout = BufferLayout.struct([BufferLayout.u32('version'), BufferLayout.u32('state'), publicKey('authorizedPubkey'), publicKey('nonce'), BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator')]);\nconst NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n/**\n * NonceAccount class\n */\n\nclass NonceAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.authorizedPubkey = void 0;\n    this.nonce = void 0;\n    this.feeCalculator = void 0;\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n\n\n  static fromAccountData(buffer) {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator\n    });\n  }\n\n}\n\nconst encodeDecode = layout => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {\n    decode,\n    encode\n  };\n};\n\nconst bigInt = length => property => {\n  const layout = blob(length, property);\n  const {\n    encode,\n    decode\n  } = encodeDecode(layout);\n  const bigIntLayout = layout;\n\n  bigIntLayout.decode = (buffer, offset) => {\n    const src = decode(buffer, offset);\n    return toBigIntLE(Buffer.from(src));\n  };\n\n  bigIntLayout.encode = (bigInt, buffer, offset) => {\n    const src = toBufferLE(bigInt, length);\n    return encode(src, buffer, offset);\n  };\n\n  return bigIntLayout;\n};\n\nconst u64 = bigInt(8);\n/**\n * Create account system transaction params\n */\n\n/**\n * System Instruction class\n */\n\nclass SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeCreateAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeTransfer(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeTransferWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports,\n      seed,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAllocate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      space\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space\n    };\n  }\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAllocateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAssign(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAssignWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeCreateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      base,\n      seed,\n      lamports,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized)\n    };\n  }\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceAdvance(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized)\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n\n}\n/**\n * An enumeration of valid SystemInstructionType's\n */\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\n\n\nconst SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('programId')])\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports')])\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('space')])\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), publicKey('programId')])\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports'), rustString('seed'), publicKey('programId')])\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\n/**\n * Factory class for transactions to interact with the System program\n */\n\nclass SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the System program\n   */\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n\n\n  static createAccount(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.newAccountPubkey,\n        isSigner: true,\n        isWritable: true\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n\n\n  static transfer(params) {\n    let data;\n    let keys;\n\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports)\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n\n\n  static assign(params) {\n    let data;\n    let keys;\n\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n\n\n  static createAccountWithSeed(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    let keys = [{\n      pubkey: params.fromPubkey,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: params.newAccountPubkey,\n      isSigner: false,\n      isWritable: true\n    }];\n\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n\n\n  static createNonceAccount(params) {\n    const transaction = new Transaction();\n\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    } else {\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey\n    };\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n\n\n  static nonceInitialize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer())\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n\n\n  static nonceAdvance(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n\n\n  static nonceWithdraw(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {\n      lamports: params.lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n\n\n  static nonceAuthorize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n\n\n  static allocate(params) {\n    let data;\n    let keys;\n\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n}\n\nSystemProgram.programId = new PublicKey('11111111111111111111111111111111'); // Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\n\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n/**\n * Program loader interface\n */\n\nclass Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n\n\n  static getMinNumSignatures(dataLength) {\n    return 2 * ( // Every transaction requires two signatures (payer + program)\n    Math.ceil(dataLength / Loader.chunkSize) + 1 + // Add one for Create transaction\n    1) // Add one for Finalize transaction\n    ;\n  }\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n\n\n  static async load(connection, payer, program, programId, data) {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(data.length); // Fetch program account info to check if it has already been created\n\n      const programInfo = await connection.getAccountInfo(program.publicKey, 'confirmed');\n      let transaction = null;\n\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.allocate({\n            accountPubkey: program.publicKey,\n            space: data.length\n          }));\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.assign({\n            accountPubkey: program.publicKey,\n            programId\n          }));\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: program.publicKey,\n            lamports: balanceNeeded - programInfo.lamports\n          }));\n        }\n      } else {\n        transaction = new Transaction().add(SystemProgram.createAccount({\n          fromPubkey: payer.publicKey,\n          newAccountPubkey: program.publicKey,\n          lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n          space: data.length,\n          programId\n        }));\n      } // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n\n\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed'\n        });\n      }\n    }\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.u32('offset'), BufferLayout.u32('bytesLength'), BufferLayout.u32('bytesLengthPadding'), BufferLayout.seq(BufferLayout.u8('byte'), BufferLayout.offset(BufferLayout.u32(), -8), 'bytes')]);\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode({\n        instruction: 0,\n        // Load instruction\n        offset,\n        bytes: bytes,\n        bytesLength: 0,\n        bytesLengthPadding: 0\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }],\n        programId,\n        data\n      });\n      transactions.push(sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      })); // Delay between sends in an attempt to reduce rate limit errors\n\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n\n    await Promise.all(transactions); // Finalize the account loaded with program data for execution\n\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode({\n        instruction: 1 // Finalize instruction\n\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId,\n        data\n      });\n      await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      });\n    } // success\n\n    return true;\n  }\n\n}\n\nLoader.chunkSize = CHUNK_SIZE;\nconst BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');\n/**\n * Factory class for transactions to interact with a program loader\n */\n\nclass BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n\n\n  static load(connection, payer, program, elf, loaderProgramId) {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n\n}\n\nvar objToString = Object.prototype.toString;\n\nvar objKeys = Object.keys || function (obj) {\n  var keys = [];\n\n  for (var name in obj) {\n    keys.push(name);\n  }\n\n  return keys;\n};\n\nfunction stringify(val, isArrayProp) {\n  var i, max, str, keys, key, propVal, toStr;\n\n  if (val === true) {\n    return \"true\";\n  }\n\n  if (val === false) {\n    return \"false\";\n  }\n\n  switch (typeof val) {\n    case \"object\":\n      if (val === null) {\n        return null;\n      } else if (val.toJSON && typeof val.toJSON === \"function\") {\n        return stringify(val.toJSON(), isArrayProp);\n      } else {\n        toStr = objToString.call(val);\n\n        if (toStr === \"[object Array]\") {\n          str = '[';\n          max = val.length - 1;\n\n          for (i = 0; i < max; i++) {\n            str += stringify(val[i], true) + ',';\n          }\n\n          if (max > -1) {\n            str += stringify(val[i], true);\n          }\n\n          return str + ']';\n        } else if (toStr === \"[object Object]\") {\n          // only object is left\n          keys = objKeys(val).sort();\n          max = keys.length;\n          str = \"\";\n          i = 0;\n\n          while (i < max) {\n            key = keys[i];\n            propVal = stringify(val[key], false);\n\n            if (propVal !== undefined) {\n              if (str) {\n                str += ',';\n              }\n\n              str += JSON.stringify(key) + ':' + propVal;\n            }\n\n            i++;\n          }\n\n          return '{' + str + '}';\n        } else {\n          return JSON.stringify(val);\n        }\n      }\n\n    case \"function\":\n    case \"undefined\":\n      return isArrayProp ? null : undefined;\n\n    case \"string\":\n      return JSON.stringify(val);\n\n    default:\n      return isFinite(val) ? val : null;\n  }\n}\n\nvar fastStableStringify = function (val) {\n  var returnVal = stringify(val, false);\n\n  if (returnVal !== undefined) {\n    return '' + returnVal;\n  }\n};\n\nvar fastStableStringify$1 = fastStableStringify;\nconst MINIMUM_SLOT_PER_EPOCH = 32; // Returns the number of trailing zeros in the binary representation of self.\n\nfunction trailingZeros(n) {\n  let trailingZeros = 0;\n\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n\n  return trailingZeros;\n} // Returns the smallest power of two greater than or equal to n\n\n\nfunction nextPowerOfTwo(n) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\n\n\nclass EpochSchedule {\n  /** The maximum number of slots in each epoch */\n\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n\n  /** Indicates whether epochs start short and grow */\n\n  /** The first epoch with `slotsPerEpoch` slots */\n\n  /** The first slot of `firstNormalEpoch` */\n  constructor(slotsPerEpoch, leaderScheduleSlotOffset, warmup, firstNormalEpoch, firstNormalSlot) {\n    this.slotsPerEpoch = void 0;\n    this.leaderScheduleSlotOffset = void 0;\n    this.warmup = void 0;\n    this.firstNormalEpoch = void 0;\n    this.firstNormalSlot = void 0;\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot) {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot) {\n    if (slot < this.firstNormalSlot) {\n      const epoch = trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1;\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch) {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (epoch - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;\n    }\n  }\n\n  getLastSlotInEpoch(epoch) {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n\n}\n\nclass SendTransactionError extends Error {\n  constructor(message, logs) {\n    super(message);\n    this.logs = void 0;\n    this.logs = logs;\n  }\n\n} // Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\n\n\nconst SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016\n};\n\nclass SolanaJSONRPCError extends Error {\n  constructor(_ref5, customMessage) {\n    let {\n      code,\n      message,\n      data\n    } = _ref5;\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = void 0;\n    this.data = void 0;\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n\n}\n\nvar fetchImpl = globalThis.fetch; // TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\n\nconst NUM_TICKS_PER_SECOND = 160;\n/**\n * @internal\n */\n\nconst DEFAULT_TICKS_PER_SLOT = 64;\n/**\n * @internal\n */\n\nconst NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n/**\n * @internal\n */\n\nconst MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n/**\n * @internal\n */\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\n\nfunction decodeData(type, data) {\n  let decoded;\n\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(`invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`);\n  }\n\n  return decoded;\n} /// The serialized size of lookup table metadata\n\n\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nclass AddressLookupTableAccount {\n  constructor(args) {\n    this.key = void 0;\n    this.state = void 0;\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive() {\n    const U64_MAX = 2n ** 64n - 1n;\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData) {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {\n      addresses\n    } = BufferLayout.struct([BufferLayout.seq(publicKey(), numSerializedAddresses, 'addresses')]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority: meta.authority.length !== 0 ? new PublicKey(meta.authority[0]) : undefined,\n      addresses: addresses.map(address => new PublicKey(address))\n    };\n  }\n\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct([BufferLayout.u32('typeIndex'), u64('deactivationSlot'), BufferLayout.nu64('lastExtendedSlot'), BufferLayout.u8('lastExtendedStartIndex'), BufferLayout.u8(), // option\n  BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u8(), -1), 'authority')])\n};\nconst URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nfunction makeWebsocketUrl(endpoint) {\n  const matches = endpoint.match(URL_RE);\n\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n\n  const [_, // eslint-disable-line @typescript-eslint/no-unused-vars\n  hostish, portWithColon, rest] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort = portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort = // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n\nvar _process$env$npm_pack;\n\nconst PublicKeyFromString = coerce(instance(PublicKey), string(), value => new PublicKey(value));\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\nconst BufferFromRawAccountData = coerce(instance(Buffer), RawAccountDataResult, value => Buffer.from(value[0], 'base64'));\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\n\nconst BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\n\n/* @internal */\n\nfunction assertEndpointUrl(putativeUrl) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n\n  return putativeUrl;\n}\n/** @internal */\n\n\nfunction extractCommitmentFromConfig(commitmentOrConfig) {\n  let commitment;\n  let config;\n\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {\n      commitment: specifiedCommitment,\n      ...specifiedConfig\n    } = commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n\n  return {\n    commitment,\n    config\n  };\n}\n/**\n * @internal\n */\n\n\nfunction createRpcResult(result) {\n  return union([type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    result\n  }), type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    error: type({\n      code: unknown(),\n      message: string(),\n      data: optional(any())\n    })\n  })]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n/**\n * @internal\n */\n\nfunction jsonRpcResult(schema) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return { ...value,\n        result: create(value.result, schema)\n      };\n    }\n  });\n}\n/**\n * @internal\n */\n\n\nfunction jsonRpcResultAndContext(value) {\n  return jsonRpcResult(type({\n    context: type({\n      slot: number()\n    }),\n    value\n  }));\n}\n/**\n * @internal\n */\n\n\nfunction notificationResultAndContext(value) {\n  return type({\n    context: type({\n      slot: number()\n    }),\n    value\n  });\n}\n/**\n * @internal\n */\n\n\nfunction versionedMessageFromResponse(version, response) {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(accountKey => new PublicKey(accountKey)),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data)\n      })),\n      addressTableLookups: response.addressTableLookups\n    });\n  } else {\n    return new Message(response);\n  }\n}\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n\nconst GetInflationGovernorResult = type({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number()\n});\n/**\n * The inflation reward for an epoch\n */\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\n\nconst GetInflationRewardResult = jsonRpcResult(array(nullable(type({\n  epoch: number(),\n  effectiveSlot: number(),\n  amount: number(),\n  postBalance: number()\n}))));\n/**\n * Information about the current epoch\n */\n\nconst GetEpochInfoResult = type({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number())\n});\nconst GetEpochScheduleResult = type({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number()\n});\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n/**\n * Transaction error or null\n */\n\nconst TransactionErrorResult = nullable(union([type({}), string()]));\n/**\n * Signature status for a transaction\n */\n\nconst SignatureStatusResult = type({\n  err: TransactionErrorResult\n});\n/**\n * Transaction signature received notification\n */\n\nconst SignatureReceivedResult = literal('receivedSignature');\n/**\n * Version info for a node\n */\n\nconst VersionResult = type({\n  'solana-core': string(),\n  'feature-set': optional(number())\n});\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({\n  err: nullable(union([type({}), string()])),\n  logs: nullable(array(string())),\n  accounts: optional(nullable(array(nullable(type({\n    executable: boolean(),\n    owner: string(),\n    lamports: number(),\n    data: array(string()),\n    rentEpoch: optional(number())\n  }))))),\n  unitsConsumed: optional(number()),\n  returnData: optional(nullable(type({\n    programId: string(),\n    data: tuple([string(), literal('base64')])\n  })))\n}));\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\n\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(type({\n  byIdentity: record(string(), array(number())),\n  range: type({\n    firstSlot: number(),\n    lastSlot: number()\n  })\n}));\n/**\n * A performance sample\n */\n\nfunction createRpcClient(url, httpHeaders, customFetch, fetchMiddleware, disableRetryOnRateLimit) {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let fetchWithMiddleware;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise((resolve, reject) => {\n        try {\n          fetchMiddleware(info, init, (modifiedInfo, modifiedInit) => resolve([modifiedInfo, modifiedInit]));\n        } catch (error) {\n          reject(error);\n        }\n      });\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign({\n        'Content-Type': 'application/json'\n      }, httpHeaders || {}, COMMON_HTTP_HEADERS)\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res;\n      let waitTime = 500;\n\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429\n        /* Too many requests */\n        ) {\n          break;\n        }\n\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n\n        too_many_requests_retries -= 1;\n\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n\n        console.log(`Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`);\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {}\n  }, {});\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client) {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client) {\n  return requests => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n      const batch = requests.map(params => {\n        return client.request(params.methodName, params.args);\n      });\n      client.request(batch, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  };\n}\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\n\n\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\n\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\n\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\n\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\n\nconst SlotRpcResult = jsonRpcResult(number());\n/**\n * Supply\n */\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\n\nconst GetSupplyRpcResult = jsonRpcResultAndContext(type({\n  total: number(),\n  circulating: number(),\n  nonCirculating: number(),\n  nonCirculatingAccounts: array(PublicKeyFromString)\n}));\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\n\n/**\n * Expected JSON RPC structure for token amounts\n */\n\nconst TokenAmountResult = type({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n});\n/**\n * Token address and balance.\n */\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\n\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(array(type({\n  address: PublicKeyFromString,\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n})));\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\n\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: BufferFromRawAccountData,\n    rentEpoch: number()\n  })\n})));\nconst ParsedAccountDataResult = type({\n  program: string(),\n  parsed: unknown(),\n  space: number()\n});\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\n\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: ParsedAccountDataResult,\n    rentEpoch: number()\n  })\n})));\n/**\n * Pair of an account address and its balance\n */\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\n\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(array(type({\n  lamports: number(),\n  address: PublicKeyFromString\n})));\n/**\n * @internal\n */\n\nconst AccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number()\n});\n/**\n * @internal\n */\n\nconst KeyedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\nconst ParsedOrRawAccountData = coerce(union([instance(Buffer), ParsedAccountDataResult]), union([RawAccountDataResult, ParsedAccountDataResult]), value => {\n  if (Array.isArray(value)) {\n    return create(value, BufferFromRawAccountData);\n  } else {\n    return value;\n  }\n});\n/**\n * @internal\n */\n\nconst ParsedAccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number()\n});\nconst KeyedParsedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult\n});\n/**\n * @internal\n */\n\nconst StakeActivationResult = type({\n  state: union([literal('active'), literal('inactive'), literal('activating'), literal('deactivating')]),\n  active: number(),\n  inactive: number()\n});\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\n\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\n\nconst AccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult)\n});\n/**\n * @internal\n */\n\nconst ProgramAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\n\nconst ProgramAccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult)\n});\n/**\n * @internal\n */\n\nconst SlotInfoResult = type({\n  parent: number(),\n  slot: number(),\n  root: number()\n});\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\n\nconst SlotNotificationResult = type({\n  subscription: number(),\n  result: SlotInfoResult\n});\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\n\n/**\n * @internal\n */\n\nconst SlotUpdateResult = union([type({\n  type: union([literal('firstShredReceived'), literal('completed'), literal('optimisticConfirmation'), literal('root')]),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('createdBank'),\n  parent: number(),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('frozen'),\n  slot: number(),\n  timestamp: number(),\n  stats: type({\n    numTransactionEntries: number(),\n    numSuccessfulTransactions: number(),\n    numFailedTransactions: number(),\n    maxTransactionsPerEntry: number()\n  })\n}), type({\n  type: literal('dead'),\n  slot: number(),\n  timestamp: number(),\n  err: string()\n})]);\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\n\nconst SlotUpdateNotificationResult = type({\n  subscription: number(),\n  result: SlotUpdateResult\n});\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\n\nconst SignatureNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(union([SignatureStatusResult, SignatureReceivedResult]))\n});\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\n\nconst RootNotificationResult = type({\n  subscription: number(),\n  result: number()\n});\nconst ContactInfoResult = type({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string())\n});\nconst VoteAccountInfoResult = type({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number())\n});\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\n\nconst GetVoteAccounts = jsonRpcResult(type({\n  current: array(VoteAccountInfoResult),\n  delinquent: array(VoteAccountInfoResult)\n}));\nconst ConfirmationStatus = union([literal('processed'), literal('confirmed'), literal('finalized')]);\nconst SignatureStatusResponse = type({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus)\n});\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\n\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(array(nullable(SignatureStatusResponse)));\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\n\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\nconst AddressTableLookupStruct = type({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number())\n});\nconst ConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(string()),\n    header: type({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number()\n    }),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    })),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct))\n  })\n});\nconst ParsedInstructionResult = type({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString\n});\nconst RawInstructionResult = type({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString\n});\nconst InstructionResult = union([RawInstructionResult, ParsedInstructionResult]);\nconst UnknownInstructionResult = union([type({\n  parsed: unknown(),\n  program: string(),\n  programId: string()\n}), type({\n  accounts: array(string()),\n  data: string(),\n  programId: string()\n})]);\nconst ParsedOrRawInstruction = coerce(InstructionResult, UnknownInstructionResult, value => {\n  if ('accounts' in value) {\n    return create(value, RawInstructionResult);\n  } else {\n    return create(value, ParsedInstructionResult);\n  }\n});\n/**\n * @internal\n */\n\nconst ParsedConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(type({\n      pubkey: PublicKeyFromString,\n      signer: boolean(),\n      writable: boolean()\n    })),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct)))\n  })\n});\nconst TokenBalanceResult = type({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult\n});\nconst LoadedAddressesResult = type({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString)\n});\n/**\n * @internal\n */\n\nconst ConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    }))\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\n/**\n * @internal\n */\n\nconst ParsedConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(ParsedOrRawInstruction)\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\n\nconst GetBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(type({\n    pubkey: string(),\n    lamports: number(),\n    postBalance: nullable(number()),\n    rewardType: nullable(string())\n  }))),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\n\nconst GetConfirmedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(type({\n    pubkey: string(),\n    lamports: number(),\n    postBalance: nullable(number()),\n    rewardType: nullable(string())\n  }))),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\n\nconst GetBlockSignaturesRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  signatures: array(string()),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\n\nconst GetTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  meta: ConfirmedTransactionMetaResult,\n  blockTime: optional(nullable(number())),\n  transaction: ConfirmedTransactionResult,\n  version: optional(TransactionVersionStruct)\n})));\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\n\nconst GetParsedTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  transaction: ParsedConfirmedTransactionResult,\n  meta: nullable(ParsedConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number())),\n  version: optional(TransactionVersionStruct)\n})));\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\n\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n}));\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\n\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  lastValidBlockHeight: number()\n}));\nconst PerfSampleResult = type({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number()\n});\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\n\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(array(PerfSampleResult));\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\n\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(nullable(type({\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n})));\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\n\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\n\nconst SendTransactionRpcResult = jsonRpcResult(string());\n/**\n * Information about the latest slot being processed by a node\n */\n\n/**\n * @internal\n */\n\nconst LogsResult = type({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string()\n});\n/**\n * Logs result.\n */\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\n\nconst LogsNotificationResult = type({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number()\n});\n/**\n * Filter for log subscriptions.\n */\n\n/** @internal */\n\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${(_process$env$npm_pack = \"0.0.0-development\") !== null && _process$env$npm_pack !== void 0 ? _process$env$npm_pack : 'UNKNOWN'}`\n};\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\n\nclass Connection {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n\n  /** @internal */\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(endpoint, commitmentOrConfig) {\n    this._commitment = void 0;\n    this._confirmTransactionInitialTimeout = void 0;\n    this._rpcEndpoint = void 0;\n    this._rpcWsEndpoint = void 0;\n    this._rpcClient = void 0;\n    this._rpcRequest = void 0;\n    this._rpcBatchRequest = void 0;\n    this._rpcWebSocket = void 0;\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketHeartbeat = null;\n    this._rpcWebSocketIdleTimeout = null;\n    this._rpcWebSocketGeneration = 0;\n    this._disableBlockhashCaching = false;\n    this._pollingBlockhash = false;\n    this._blockhashInfo = {\n      latestBlockhash: null,\n      lastFetch: 0,\n      transactionSignatures: [],\n      simulatedSignatures: []\n    };\n    this._nextClientSubscriptionId = 0;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId = {};\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    this._subscriptionsByHash = {};\n    this._subscriptionsAutoDisposedByRpc = new Set();\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout = commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n    this._rpcClient = createRpcClient(endpoint, httpHeaders, fetch, fetchMiddleware, disableRetryOnRateLimit);\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n    this._rpcWebSocket = new Client(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity\n    });\n\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n\n    this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));\n\n    this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));\n\n    this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));\n\n    this._rpcWebSocket.on('slotsUpdatesNotification', this._wsOnSlotUpdatesNotification.bind(this));\n\n    this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));\n\n    this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));\n\n    this._rpcWebSocket.on('logsNotification', this._wsOnLogsNotification.bind(this));\n  }\n  /**\n   * The default commitment used for requests\n   */\n\n\n  get commitment() {\n    return this._commitment;\n  }\n  /**\n   * The RPC endpoint\n   */\n\n\n  get rpcEndpoint() {\n    return this._rpcEndpoint;\n  }\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n\n\n  async getBalanceAndContext(publicKey, commitmentOrConfig) {\n    /** @internal */\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get balance for ${publicKey.toBase58()}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the balance for the specified public key\n   */\n\n\n  async getBalance(publicKey, commitmentOrConfig) {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig).then(x => x.value).catch(e => {\n      throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);\n    });\n  }\n  /**\n   * Fetch the estimated production time of a block\n   */\n\n\n  async getBlockTime(slot) {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get block time for slot ${slot}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n\n\n  async getMinimumLedgerSlot() {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get minimum ledger slot');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n\n\n  async getFirstAvailableBlock() {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get first available block');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch information about the current supply\n   */\n\n\n  async getSupply(config) {\n    let configArg = {};\n\n    if (typeof config === 'string') {\n      configArg = {\n        commitment: config\n      };\n    } else if (config) {\n      configArg = { ...config,\n        commitment: config && config.commitment || this.commitment\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current supply of a token mint\n   */\n\n\n  async getTokenSupply(tokenMintAddress, commitment) {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current balance of a token account\n   */\n\n\n  async getTokenAccountBalance(tokenAddress, commitment) {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token account balance');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n\n\n  async getTokenAccountsByOwner(ownerAddress, filter, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    let _args = [ownerAddress.toBase58()];\n\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n\n\n  async getParsedTokenAccountsByOwner(ownerAddress, filter, commitment) {\n    let _args = [ownerAddress.toBase58()];\n\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n\n\n  async getLargestAccounts(config) {\n    const arg = { ...config,\n      commitment: config && config.commitment || this.commitment\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n\n\n  async getTokenLargestAccounts(mintAddress, commitment) {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token largest accounts');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n\n\n  async getAccountInfoAndContext(publicKey, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64', config);\n\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(AccountInfoResult)));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n\n\n  async getParsedAccountInfo(publicKey, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed', config);\n\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for the specified public key\n   */\n\n\n  async getAccountInfo(publicKey, commitmentOrConfig) {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + e);\n    }\n  }\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n\n\n  async getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(AccountInfoResult))));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n\n\n  async getMultipleAccountsInfo(publicKeys, commitmentOrConfig) {\n    const res = await this.getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig);\n    return res.value;\n  }\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n\n\n  async getStakeActivation(publicKey, commitmentOrConfig, epoch) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined\n    /* encoding */\n    , { ...config,\n      epoch: epoch != null ? epoch : config === null || config === void 0 ? void 0 : config.epoch\n    });\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get Stake Activation ${publicKey.toBase58()}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n\n\n  async getProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(configOrCommitment);\n    const {\n      encoding,\n      ...configWithoutEncoding\n    } = config || {};\n\n    const args = this._buildArgs([programId.toBase58()], commitment, encoding || 'base64', configWithoutEncoding);\n\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n\n\n  async getParsedProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(configOrCommitment);\n\n    const args = this._buildArgs([programId.toBase58()], commitment, 'jsonParsed', config);\n\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedParsedAccountInfoResult)));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n    }\n\n    return res.result;\n  } // eslint-disable-next-line no-dupe-class-members\n\n\n  async confirmTransaction(strategy, commitment) {\n    let rawSignature;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy;\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n    const subscriptionCommitment = commitment || this.commitment;\n    let timeoutId;\n    let subscriptionId;\n    let done = false;\n    const confirmationPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(rawSignature, (result, context) => {\n          subscriptionId = undefined;\n          const response = {\n            context,\n            value: result\n          };\n          done = true;\n          resolve({\n            __type: TransactionStatus.PROCESSED,\n            response\n          });\n        }, subscriptionCommitment);\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const expiryPromise = new Promise(resolve => {\n      if (typeof strategy === 'string') {\n        let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n\n        switch (subscriptionCommitment) {\n          case 'processed':\n          case 'recent':\n          case 'single':\n          case 'confirmed':\n          case 'singleGossip':\n            {\n              timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n              break;\n            }\n        }\n\n        timeoutId = setTimeout(() => resolve({\n          __type: TransactionStatus.TIMED_OUT,\n          timeoutMs\n        }), timeoutMs);\n      } else {\n        let config = strategy;\n\n        const checkBlockHeight = async () => {\n          try {\n            const blockHeight = await this.getBlockHeight(commitment);\n            return blockHeight;\n          } catch (_e) {\n            return -1;\n          }\n        };\n\n        (async () => {\n          let currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n\n          while (currentBlockHeight <= config.lastValidBlockHeight) {\n            await sleep(1000);\n            if (done) return;\n            currentBlockHeight = await checkBlockHeight();\n            if (done) return;\n          }\n\n          resolve({\n            __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED\n          });\n        })();\n      }\n    });\n    let result;\n\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n\n      switch (outcome.__type) {\n        case TransactionStatus.BLOCKHEIGHT_EXCEEDED:\n          throw new TransactionExpiredBlockheightExceededError(rawSignature);\n\n        case TransactionStatus.PROCESSED:\n          result = outcome.response;\n          break;\n\n        case TransactionStatus.TIMED_OUT:\n          throw new TransactionExpiredTimeoutError(rawSignature, outcome.timeoutMs / 1000);\n      }\n    } finally {\n      clearTimeout(timeoutId);\n\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    return result;\n  }\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n\n\n  async getClusterNodes() {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n\n    return res.result;\n  }\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n\n\n  async getVoteAccounts(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current slot that the node is processing\n   */\n\n\n  async getSlot(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n\n\n  async getSlotLeader(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n\n\n  async getSlotLeaders(startSlot, limit) {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current status of a signature\n   */\n\n\n  async getSignatureStatus(signature, config) {\n    const {\n      context,\n      value: values\n    } = await this.getSignatureStatuses([signature], config);\n    assert(values.length === 1);\n    const value = values[0];\n    return {\n      context,\n      value\n    };\n  }\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n\n\n  async getSignatureStatuses(signatures, config) {\n    const params = [signatures];\n\n    if (config) {\n      params.push(config);\n    }\n\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n\n\n  async getTransactionCount(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction count');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n\n\n  async getTotalSupply(commitment) {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true\n    });\n    return result.value.total;\n  }\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n\n\n  async getInflationGovernor(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n\n\n  async getInflationReward(addresses, epoch, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([addresses.map(pubkey => pubkey.toBase58())], commitment, undefined\n    /* encoding */\n    , { ...config,\n      epoch: epoch != null ? epoch : config === null || config === void 0 ? void 0 : config.epoch\n    });\n\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the Epoch Info parameters\n   */\n\n\n  async getEpochInfo(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n\n\n  async getEpochSchedule() {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n\n    const epochSchedule = res.result;\n    return new EpochSchedule(epochSchedule.slotsPerEpoch, epochSchedule.leaderScheduleSlotOffset, epochSchedule.warmup, epochSchedule.firstNormalEpoch, epochSchedule.firstNormalSlot);\n  }\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n\n\n  async getLeaderSchedule() {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n\n\n  async getMinimumBalanceForRentExemption(dataLength, commitment) {\n    const args = this._buildArgs([dataLength], commitment);\n\n    const unsafeRes = await this._rpcRequest('getMinimumBalanceForRentExemption', args);\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n\n\n  async getRecentBlockhashAndContext(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n\n\n  async getRecentPerformanceSamples(limit) {\n    const unsafeRes = await this._rpcRequest('getRecentPerformanceSamples', limit ? [limit] : []);\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent performance samples');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n\n\n  async getFeeCalculatorForBlockhash(blockhash, commitment) {\n    const args = this._buildArgs([blockhash], commitment);\n\n    const unsafeRes = await this._rpcRequest('getFeeCalculatorForBlockhash', args);\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n\n    const {\n      context,\n      value\n    } = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null\n    };\n  }\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n\n\n  async getFeeForMessage(message, commitment) {\n    const wireMessage = message.serialize().toString('base64');\n\n    const args = this._buildArgs([wireMessage], commitment);\n\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n\n\n  async getRecentBlockhash(commitment) {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n\n\n  async getLatestBlockhash(commitmentOrConfig) {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n\n\n  async getLatestBlockhashAndContext(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the node version\n   */\n\n\n  async getVersion() {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the genesis hash\n   */\n\n\n  async getGenesisHash() {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n\n  async getBlock(slot, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n    return { ...result,\n      transactions: result.transactions.map(_ref6 => {\n        let {\n          transaction,\n          meta,\n          version\n        } = _ref6;\n        return {\n          meta,\n          transaction: { ...transaction,\n            message: versionedMessageFromResponse(version, transaction.message)\n          },\n          version\n        };\n      })\n    };\n  }\n  /*\n   * Returns the current block height of the node\n   */\n\n\n  async getBlockHeight(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block height information');\n    }\n\n    return res.result;\n  }\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n\n\n  async getBlockProduction(configOrCommitment) {\n    let extra;\n    let commitment;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {\n        commitment: c,\n        ...rest\n      } = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block production information');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n\n  async getTransaction(signature, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n    return { ...result,\n      transaction: { ...result.transaction,\n        message: versionedMessageFromResponse(result.version, result.transaction.message)\n      }\n    };\n  }\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n\n\n  async getParsedTransaction(signature, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n\n\n  async getParsedTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n\n      return res.result;\n    });\n    return res;\n  }\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n\n  async getTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined\n      /* encoding */\n      , config);\n\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n\n      const result = res.result;\n      if (!result) return result;\n      return { ...result,\n        transaction: { ...result.transaction,\n          message: versionedMessageFromResponse(result.version, result.transaction.message)\n        }\n      };\n    });\n    return res;\n  }\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n\n\n  async getConfirmedBlock(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = { ...result,\n      transactions: result.transactions.map(_ref7 => {\n        let {\n          transaction,\n          meta\n        } = _ref7;\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: { ...transaction,\n            message\n          }\n        };\n      })\n    };\n    return { ...block,\n      transactions: block.transactions.map(_ref8 => {\n        let {\n          transaction,\n          meta\n        } = _ref8;\n        return {\n          meta,\n          transaction: Transaction.populate(transaction.message, transaction.signatures)\n        };\n      })\n    };\n  }\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n\n\n  async getBlocks(startSlot, endSlot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed(endSlot !== undefined ? [startSlot, endSlot] : [startSlot], commitment);\n\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n\n\n  async getBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n\n    const result = res.result;\n\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n\n    return result;\n  }\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n\n\n  async getConfirmedBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    return result;\n  }\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n\n\n  async getConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return { ...result,\n      transaction: Transaction.populate(message, signatures)\n    };\n  }\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n\n\n  async getParsedConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transaction');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n\n\n  async getParsedConfirmedTransactions(signatures, commitment) {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n\n      return {\n        methodName: 'getConfirmedTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transactions');\n      }\n\n      return res.result;\n    });\n    return res;\n  }\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n\n\n  async getConfirmedSignaturesForAddress(address, startSlot, endSlot) {\n    let options = {};\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n\n    while (!('until' in options)) {\n      startSlot--;\n\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(startSlot, 'finalized');\n\n        if (block.signatures.length > 0) {\n          options.until = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n\n    while (!('before' in options)) {\n      endSlot++;\n\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n\n        if (block.signatures.length > 0) {\n          options.before = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(address, options);\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n\n\n  async getConfirmedSignaturesForAddress2(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n\n    const unsafeRes = await this._rpcRequest('getConfirmedSignaturesForAddress2', args);\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed signatures for address');\n    }\n\n    return res.result;\n  }\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n\n\n  async getSignaturesForAddress(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signatures for address');\n    }\n\n    return res.result;\n  }\n\n  async getAddressLookupTable(accountKey, config) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(accountKey, config);\n    let value = null;\n\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data)\n      });\n    }\n\n    return {\n      context,\n      value\n    };\n  }\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n\n\n  async getNonceAndContext(nonceAccount, commitment) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(nonceAccount, commitment);\n    let value = null;\n\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value\n    };\n  }\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n\n\n  async getNonce(nonceAccount, commitment) {\n    return await this.getNonceAndContext(nonceAccount, commitment).then(x => x.value).catch(e => {\n      throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);\n    });\n  }\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n\n\n  async requestAirdrop(to, lamports) {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [to.toBase58(), lamports]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `airdrop to ${to.toBase58()} failed`);\n    }\n\n    return res.result;\n  }\n  /**\n   * @internal\n   */\n\n\n  async _blockhashWithExpiryBlockHeight(disableCache) {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n  /**\n   * @internal\n   */\n\n\n  async _pollNewBlockhash() {\n    this._pollingBlockhash = true;\n\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash ? cachedLatestBlockhash.blockhash : null;\n\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: []\n          };\n          return latestBlockhash;\n        } // Sleep for approximately half a slot\n\n\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(`Unable to obtain a new blockhash after ${Date.now() - startTime}ms`);\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n  /**\n   * get the stake minimum delegation\n   */\n\n\n  async getStakeMinimumDelegation(config) {\n    const {\n      commitment,\n      config: configArg\n    } = extractCommitmentFromConfig(config);\n\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get stake minimum delegation`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Simulate a transaction\n   */\n\n\n  async simulateTransaction(transactionOrMessage, signers, includeAccounts) {\n    let transaction;\n\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage); // HACK: this function relies on mutating the populated transaction\n\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        if (!signers) break;\n        transaction.sign(...signers);\n\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n\n        if (!this._blockhashInfo.simulatedSignatures.includes(signature) && !this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n\n    const signData = message.serialize();\n\n    const wireTransaction = transaction._serialize(signData);\n\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config = {\n      encoding: 'base64',\n      commitment: this.commitment\n    };\n\n    if (includeAccounts) {\n      const addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map(key => key.toBase58());\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n\n    if ('error' in res) {\n      let logs;\n\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n\n      throw new SendTransactionError('failed to simulate transaction: ' + res.error.message, logs);\n    }\n\n    return res.result;\n  }\n  /**\n   * Sign and send a transaction\n   */\n\n\n  async sendTransaction(transaction, signers, options) {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n\n\n  async sendRawTransaction(rawTransaction, options) {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(encodedTransaction, options);\n    return result;\n  }\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n\n\n  async sendEncodedTransaction(encodedTransaction, options) {\n    const config = {\n      encoding: 'base64'\n    };\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment = options && options.preflightCommitment || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n\n    if ('error' in res) {\n      let logs;\n\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n\n      throw new SendTransactionError('failed to send transaction: ' + res.error.message, logs);\n    }\n\n    return res.result;\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n\n    this._updateSubscriptions();\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnError(err) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnClose(code) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration++;\n\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n\n      return;\n    } // implicit close, prepare subscriptions for auto-reconnect\n\n\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(this._subscriptionsByHash).forEach(_ref9 => {\n      let [hash, subscription] = _ref9;\n      this._subscriptionsByHash[hash] = { ...subscription,\n        state: 'pending'\n      };\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(`Error when closing socket connection: ${err.message}`);\n            }\n          }\n        }, 500);\n      }\n\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all( // Don't be tempted to change this to `Object.entries`. We call\n    // `_updateSubscriptions` recursively when processing the state,\n    // so it's important that we look up the *current* version of\n    // each subscription, every time we process a hash.\n    Object.keys(this._subscriptionsByHash).map(async hash => {\n      const subscription = this._subscriptionsByHash[hash];\n\n      if (subscription === undefined) {\n        // This entry has since been deleted. Skip.\n        return;\n      }\n\n      switch (subscription.state) {\n        case 'pending':\n        case 'unsubscribed':\n          if (subscription.callbacks.size === 0) {\n            /**\n             * You can end up here when:\n             *\n             * - a subscription has recently unsubscribed\n             *   without having new callbacks added to it\n             *   while the unsubscribe was in flight, or\n             * - when a pending subscription has its\n             *   listeners removed before a request was\n             *   sent to the server.\n             *\n             * Being that nobody is interested in this\n             * subscription any longer, delete it.\n             */\n            delete this._subscriptionsByHash[hash];\n\n            if (subscription.state === 'unsubscribed') {\n              delete this._subscriptionCallbacksByServerSubscriptionId[subscription.serverSubscriptionId];\n            }\n\n            await this._updateSubscriptions();\n            return;\n          }\n\n          await (async () => {\n            const {\n              args,\n              method\n            } = subscription;\n\n            try {\n              this._subscriptionsByHash[hash] = { ...subscription,\n                state: 'subscribing'\n              };\n              const serverSubscriptionId = await this._rpcWebSocket.call(method, args);\n              this._subscriptionsByHash[hash] = { ...subscription,\n                serverSubscriptionId,\n                state: 'subscribed'\n              };\n              this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId] = subscription.callbacks;\n              await this._updateSubscriptions();\n            } catch (e) {\n              if (e instanceof Error) {\n                console.error(`${method} error for argument`, args, e.message);\n              }\n\n              if (!isCurrentConnectionStillActive()) {\n                return;\n              } // TODO: Maybe add an 'errored' state or a retry limit?\n\n\n              this._subscriptionsByHash[hash] = { ...subscription,\n                state: 'pending'\n              };\n              await this._updateSubscriptions();\n            }\n          })();\n          break;\n\n        case 'subscribed':\n          if (subscription.callbacks.size === 0) {\n            // By the time we successfully set up a subscription\n            // with the server, the client stopped caring about it.\n            // Tear it down now.\n            await (async () => {\n              const {\n                serverSubscriptionId,\n                unsubscribeMethod\n              } = subscription;\n\n              if (this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)) {\n                /**\n                 * Special case.\n                 * If we're dealing with a subscription that has been auto-\n                 * disposed by the RPC, then we can skip the RPC call to\n                 * tear down the subscription here.\n                 *\n                 * NOTE: There is a proposal to eliminate this special case, here:\n                 * https://github.com/solana-labs/solana/issues/18892\n                 */\n                this._subscriptionsAutoDisposedByRpc.delete(serverSubscriptionId);\n              } else {\n                this._subscriptionsByHash[hash] = { ...subscription,\n                  state: 'unsubscribing'\n                };\n\n                try {\n                  await this._rpcWebSocket.call(unsubscribeMethod, [serverSubscriptionId]);\n                } catch (e) {\n                  if (e instanceof Error) {\n                    console.error(`${unsubscribeMethod} error:`, e.message);\n                  }\n\n                  if (!isCurrentConnectionStillActive()) {\n                    return;\n                  } // TODO: Maybe add an 'errored' state or a retry limit?\n\n\n                  this._subscriptionsByHash[hash] = { ...subscription,\n                    state: 'subscribed'\n                  };\n                  await this._updateSubscriptions();\n                  return;\n                }\n              }\n\n              this._subscriptionsByHash[hash] = { ...subscription,\n                state: 'unsubscribed'\n              };\n              await this._updateSubscriptions();\n            })();\n          }\n\n          break;\n      }\n    }));\n  }\n  /**\n   * @internal\n   */\n\n\n  _handleServerNotification(serverSubscriptionId, callbackArgs) {\n    const callbacks = this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n\n    if (callbacks === undefined) {\n      return;\n    }\n\n    callbacks.forEach(cb => {\n      try {\n        cb( // I failed to find a way to convince TypeScript that `cb` is of type\n        // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n        // See https://github.com/microsoft/TypeScript/issues/47615\n        // @ts-ignore\n        ...callbackArgs);\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, AccountNotificationResult);\n\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n  /**\n   * @internal\n   */\n\n\n  _makeSubscription(subscriptionConfig,\n  /**\n   * When preparing `args` for a call to `_makeSubscription`, be sure\n   * to carefully apply a default `commitment` property, if necessary.\n   *\n   * - If the user supplied a `commitment` use that.\n   * - Otherwise, if the `Connection::commitment` is set, use that.\n   * - Otherwise, set it to the RPC server default: `finalized`.\n   *\n   * This is extremely important to ensure that these two fundamentally\n   * identical subscriptions produce the same identifying hash:\n   *\n   * - A subscription made without specifying a commitment.\n   * - A subscription made where the commitment specified is the same\n   *   as the default applied to the subscription above.\n   *\n   * Example; these two subscriptions must produce the same hash:\n   *\n   * - An `accountSubscribe` subscription for `'PUBKEY'`\n   * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n   *   `'finalized'`.\n   *\n   * See the 'making a subscription with defaulted params omitted' test\n   * in `connection-subscriptions.ts` for more.\n   */\n  args) {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify$1([subscriptionConfig.method, args], true\n    /* isArrayProp */\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = { ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending'\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(subscription !== undefined, `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`);\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n\n    this._updateSubscriptions();\n\n    return clientSubscriptionId;\n  }\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n\n\n  onAccountChange(publicKey, callback, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment || this._commitment || 'finalized', // Apply connection/server default.\n    'base64');\n\n    return this._makeSubscription({\n      callback,\n      method: 'accountSubscribe',\n      unsubscribeMethod: 'accountUnsubscribe'\n    }, args);\n  }\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'account change');\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnProgramAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, ProgramAccountNotificationResult);\n\n    this._handleServerNotification(subscription, [{\n      accountId: result.value.pubkey,\n      accountInfo: result.value.account\n    }, result.context]);\n  }\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n\n\n  onProgramAccountChange(programId, callback, commitment, filters) {\n    const args = this._buildArgs([programId.toBase58()], commitment || this._commitment || 'finalized', // Apply connection/server default.\n    'base64'\n    /* encoding */\n    , filters ? {\n      filters: filters\n    } : undefined\n    /* extra */\n    );\n\n    return this._makeSubscription({\n      callback,\n      method: 'programSubscribe',\n      unsubscribeMethod: 'programUnsubscribe'\n    }, args);\n  }\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeProgramAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'program account change');\n  }\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n\n\n  onLogs(filter, callback, commitment) {\n    const args = this._buildArgs([typeof filter === 'object' ? {\n      mentions: [filter.toString()]\n    } : filter], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n\n    return this._makeSubscription({\n      callback,\n      method: 'logsSubscribe',\n      unsubscribeMethod: 'logsUnsubscribe'\n    }, args);\n  }\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n\n\n  async removeOnLogsListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnLogsNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, LogsNotificationResult);\n\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnSlotNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotNotificationResult);\n\n    this._handleServerNotification(subscription, [result]);\n  }\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n\n\n  onSlotChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotSubscribe',\n      unsubscribeMethod: 'slotUnsubscribe'\n    }, []\n    /* args */\n    );\n  }\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeSlotChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot change');\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnSlotUpdatesNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotUpdateNotificationResult);\n\n    this._handleServerNotification(subscription, [result]);\n  }\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n\n\n  onSlotUpdate(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotsUpdatesSubscribe',\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe'\n    }, []\n    /* args */\n    );\n  }\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeSlotUpdateListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot update');\n  }\n  /**\n   * @internal\n   */\n\n\n  async _unsubscribeClientSubscription(clientSubscriptionId, subscriptionName) {\n    const dispose = this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn('Ignored unsubscribe request because an active subscription with id ' + `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` + 'could not be found.');\n    }\n  }\n\n  _buildArgs(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n\n    if (commitment || encoding || extra) {\n      let options = {};\n\n      if (encoding) {\n        options.encoding = encoding;\n      }\n\n      if (commitment) {\n        options.commitment = commitment;\n      }\n\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n\n      args.push(options);\n    }\n\n    return args;\n  }\n  /**\n   * @internal\n   */\n\n\n  _buildArgsAtLeastConfirmed(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error('Using Connection with default commitment: `' + this._commitment + '`, but method requires at least `confirmed`');\n    }\n\n    return this._buildArgs(args, override, encoding, extra);\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnSignatureNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SignatureNotificationResult);\n\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n\n    this._handleServerNotification(subscription, result.value === 'receivedSignature' ? [{\n      type: 'received'\n    }, result.context] : [{\n      type: 'status',\n      result: result.value\n    }, result.context]);\n  }\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n\n\n  onSignature(signature, callback, commitment) {\n    const args = this._buildArgs([signature], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context); // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n\n          try {\n            this.removeSignatureListener(clientSubscriptionId); // eslint-disable-next-line no-empty\n          } catch (_err) {// Already removed.\n          }\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n\n    return clientSubscriptionId;\n  }\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n\n\n  onSignatureWithOptions(signature, callback, options) {\n    const {\n      commitment,\n      ...extra\n    } = { ...options,\n      commitment: options && options.commitment || this._commitment || 'finalized' // Apply connection/server default.\n\n    };\n\n    const args = this._buildArgs([signature], commitment, undefined\n    /* encoding */\n    , extra);\n\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        callback(notification, context); // Signatures subscriptions are auto-removed by the RPC service\n        // so no need to explicitly send an unsubscribe message.\n\n        try {\n          this.removeSignatureListener(clientSubscriptionId); // eslint-disable-next-line no-empty\n        } catch (_err) {// Already removed.\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n\n    return clientSubscriptionId;\n  }\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeSignatureListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'signature result');\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnRootNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, RootNotificationResult);\n\n    this._handleServerNotification(subscription, [result]);\n  }\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n\n\n  onRootChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'rootSubscribe',\n      unsubscribeMethod: 'rootUnsubscribe'\n    }, []\n    /* args */\n    );\n  }\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeRootChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'root change');\n  }\n\n}\n/**\n * Keypair signer interface\n */\n\n/**\n * An account keypair used for signing transactions.\n */\n\n\nclass Keypair {\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair) {\n    this._keypair = void 0;\n    this._keypair = keypair !== null && keypair !== void 0 ? keypair : generateKeypair();\n  }\n  /**\n   * Generate a new random keypair\n   */\n\n\n  static generate() {\n    return new Keypair(generateKeypair());\n  }\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n\n\n  static fromSecretKey(secretKey, options) {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n\n    const publicKey = secretKey.slice(32, 64);\n\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n\n    return new Keypair({\n      publicKey,\n      secretKey\n    });\n  }\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n\n\n  static fromSeed(seed) {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({\n      publicKey,\n      secretKey\n    });\n  }\n  /**\n   * The public key for this keypair\n   */\n\n\n  get publicKey() {\n    return new PublicKey(this._keypair.publicKey);\n  }\n  /**\n   * The raw secret key for this keypair\n   */\n\n\n  get secretKey() {\n    return this._keypair.secretKey;\n  }\n\n}\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\n\n\nconst LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('recentSlot'), BufferLayout.u8('bumpSeed')])\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64(), BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u32(), -8), 'addresses')])\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\n\nclass AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [layoutType, layout] of Object.entries(LOOKUP_TABLE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == index) {\n        type = layoutType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Invalid Instruction. Should be a LookupTable Instruction');\n    }\n\n    return type;\n  }\n\n  static decodeCreateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n    const {\n      recentSlot\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable, instruction.data);\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot)\n    };\n  }\n\n  static decodeExtendLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n\n    if (instruction.keys.length < 2) {\n      throw new Error(`invalid instruction; found ${instruction.keys.length} keys, expected at least 2`);\n    }\n\n    const {\n      addresses\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable, instruction.data);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer))\n    };\n  }\n\n  static decodeCloseLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey\n    };\n  }\n\n  static decodeFreezeLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n\n  static decodeDeactivateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error('invalid instruction; programId is not AddressLookupTable Program');\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkKeysLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n\n}\n\nclass AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static createLookupTable(params) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync([params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)], this.programId);\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed\n    });\n    const keys = [{\n      pubkey: lookupTableAddress,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.payer,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false\n    }];\n    return [new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    }), lookupTableAddress];\n  }\n\n  static freezeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n\n  static extendLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes())\n    });\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n\n    if (params.payer) {\n      keys.push({\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n\n  static deactivateLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n\n  static closeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.recipient,\n      isSigner: false,\n      isWritable: true\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n\n}\n\nAddressLookupTableProgram.programId = new PublicKey('AddressLookupTab1e1111111111111111111111111');\n/**\n * Compute Budget Instruction class\n */\n\nclass ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a ComputeBudgetInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n\n\n  static decodeRequestUnits(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units,\n      additionalFee\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits, instruction.data);\n    return {\n      units,\n      additionalFee\n    };\n  }\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n\n\n  static decodeRequestHeapFrame(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      bytes\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame, instruction.data);\n    return {\n      bytes\n    };\n  }\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n\n\n  static decodeSetComputeUnitLimit(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit, instruction.data);\n    return {\n      units\n    };\n  }\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n\n\n  static decodeSetComputeUnitPrice(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      microLamports\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice, instruction.data);\n    return {\n      microLamports\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error('invalid instruction; programId is not ComputeBudgetProgram');\n    }\n  }\n\n}\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\n\n\nconst COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units'), BufferLayout.u32('additionalFee')])\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')])\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units')])\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), u64('microLamports')])\n  }\n});\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\n\nclass ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n\n\n  static requestUnits(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n\n  static requestHeapFrame(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n\n  static setComputeUnitLimit(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n\n  static setComputeUnitPrice(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports)\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n\n}\n\nComputeBudgetProgram.programId = new PublicKey('ComputeBudget111111111111111111111111111111');\nconst PRIVATE_KEY_BYTES$1 = 64;\nconst PUBLIC_KEY_BYTES$1 = 32;\nconst SIGNATURE_BYTES = 64;\n/**\n * Params for creating an ed25519 instruction using a public key\n */\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u8('padding'), BufferLayout.u16('signatureOffset'), BufferLayout.u16('signatureInstructionIndex'), BufferLayout.u16('publicKeyOffset'), BufferLayout.u16('publicKeyInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u16('messageInstructionIndex')]);\n\nclass Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the ed25519 program\n   */\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n\n\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      instructionIndex\n    } = params;\n    assert(publicKey.length === PUBLIC_KEY_BYTES$1, `Public Key must be ${PUBLIC_KEY_BYTES$1} bytes but received ${publicKey.length} bytes`);\n    assert(signature.length === SIGNATURE_BYTES, `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`);\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n    const index = instructionIndex == null ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n    : instructionIndex;\n    ED25519_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      padding: 0,\n      signatureOffset,\n      signatureInstructionIndex: index,\n      publicKeyOffset,\n      publicKeyInstructionIndex: index,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: index\n    }, instructionData);\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData\n    });\n  }\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n\n\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey,\n      message,\n      instructionIndex\n    } = params;\n    assert(privateKey.length === PRIVATE_KEY_BYTES$1, `Private key must be ${PRIVATE_KEY_BYTES$1} bytes but received ${privateKey.length} bytes`);\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n\n}\n\nEd25519Program.programId = new PublicKey('Ed25519SigVerify111111111111111111111111111'); // library interoperable with the synchronous APIs in web3.js.\n\nsecp256k1.utils.hmacSha256Sync = function (key) {\n  const h = hmac.create(sha256, key);\n\n  for (var _len6 = arguments.length, msgs = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n    msgs[_key6 - 1] = arguments[_key6];\n  }\n\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\n\nconst ecdsaSign = (msgHash, privKey) => secp256k1.signSync(msgHash, privKey, {\n  der: false,\n  recovered: true\n});\n\nsecp256k1.utils.isValidPrivateKey;\nconst publicKeyCreate = secp256k1.getPublicKey;\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u16('signatureOffset'), BufferLayout.u8('signatureInstructionIndex'), BufferLayout.u16('ethAddressOffset'), BufferLayout.u8('ethAddressInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u8('messageInstructionIndex'), BufferLayout.blob(20, 'ethAddress'), BufferLayout.blob(64, 'signature'), BufferLayout.u8('recoveryId')]);\n\nclass Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n\n\n  static publicKeyToEthAddress(publicKey) {\n    assert(publicKey.length === PUBLIC_KEY_BYTES, `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`);\n\n    try {\n      return Buffer.from(sha3.keccak_256.update(toBuffer(publicKey)).digest()).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n\n\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    } = params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    });\n  }\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n\n\n  static createInstructionWithEthAddress(params) {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0\n    } = params;\n    let ethAddress;\n\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(ethAddress.length === ETHEREUM_ADDRESS_BYTES, `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`);\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);\n    SECP256K1_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      signatureOffset,\n      signatureInstructionIndex: instructionIndex,\n      ethAddressOffset,\n      ethAddressInstructionIndex: instructionIndex,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: instructionIndex,\n      signature: toBuffer(signature),\n      ethAddress: toBuffer(ethAddress),\n      recoveryId\n    }, instructionData);\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData\n    });\n  }\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n\n\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey: pkey,\n      message,\n      instructionIndex\n    } = params;\n    assert(pkey.length === PRIVATE_KEY_BYTES, `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`);\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false\n      /* isCompressed */\n      ).slice(1); // throw away leading byte\n\n      const messageHash = Buffer.from(sha3.keccak_256.update(toBuffer(message)).digest());\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n\n}\n\nSecp256k1Program.programId = new PublicKey('KeccakSecp256k11111111111111111111111111111');\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\n\nconst STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');\n/**\n * Stake account authority info\n */\n\nclass Authorized {\n  /** stake authority */\n\n  /** withdraw authority */\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker, withdrawer) {\n    this.staker = void 0;\n    this.withdrawer = void 0;\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n\n}\n/**\n * Stake account lockup info\n */\n\n\nclass Lockup {\n  /** Unix timestamp of lockup expiration */\n\n  /** Epoch of lockup expiration */\n\n  /** Lockup custodian authority */\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp, epoch, custodian) {\n    this.unixTimestamp = void 0;\n    this.epoch = void 0;\n    this.custodian = void 0;\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n  /**\n   * Default, inactive Lockup value\n   */\n\n\n}\n\nLockup.default = new Lockup(0, 0, PublicKey.default);\n/**\n * Stake Instruction class\n */\n\nclass StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized,\n      lockup\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),\n      lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))\n    };\n  }\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeDelegate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey\n    };\n  }\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      stakeAuthorizationType\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n\n    return o;\n  }\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n\n    return o;\n  }\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeSplit(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeMerge(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey\n    };\n  }\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n\n    return o;\n  }\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeDeactivate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n\n}\n/**\n * An enumeration of valid StakeInstructionType's\n */\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\n\n\nconst STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), authorized(), lockup()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType')])\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType'), rustString('authoritySeed'), publicKey('authorityOwner')])\n  }\n});\n/**\n * Stake authorization type\n */\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\n\nconst StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Stake program\n */\n\nclass StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Stake program\n   */\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n\n\n  static initialize(params) {\n    const {\n      stakePubkey,\n      authorized,\n      lockup: maybeLockup\n    } = params;\n    const lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer())\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer())\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n\n\n  static createAccountWithSeed(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccountWithSeed({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      basePubkey: params.basePubkey,\n      seed: params.seed,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n\n\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n\n\n  static delegate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      votePubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: STAKE_CONFIG_ID,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n\n\n  static authorize(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n\n\n  static authorizeWithSeed(params) {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer())\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorityBase,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  static splitInstruction(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {\n      lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: splitStakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n\n\n  static split(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.authorizedPubkey,\n      newAccountPubkey: params.splitStakePubkey,\n      lamports: 0,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction(params));\n  }\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n\n\n  static splitWithSeed(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.allocate({\n      accountPubkey: splitStakePubkey,\n      basePubkey,\n      seed,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction({\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    }));\n  }\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n\n\n  static merge(params) {\n    const {\n      stakePubkey,\n      sourceStakePubKey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: sourceStakePubKey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n\n\n  static withdraw(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      toPubkey,\n      lamports,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n\n\n  static deactivate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n}\n\nStakeProgram.programId = new PublicKey('Stake11111111111111111111111111111111111111');\nStakeProgram.space = 200;\n/**\n * Vote account info\n */\n\nclass VoteInit {\n  /** [0, 100] */\n  constructor(nodePubkey, authorizedVoter, authorizedWithdrawer, commission) {\n    this.nodePubkey = void 0;\n    this.authorizedVoter = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n\n}\n/**\n * Create vote account transaction params\n */\n\n/**\n * Vote Instruction class\n */\n\n\nclass VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n\n\n  static decodeInitializeAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n    const {\n      voteInit\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.InitializeAccount, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(new PublicKey(voteInit.nodePubkey), new PublicKey(voteInit.authorizedVoter), new PublicKey(voteInit.authorizedWithdrawer), voteInit.commission)\n    };\n  }\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      voteAuthorizationType\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      }\n    };\n  }\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n\n\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n\n}\n/**\n * An enumeration of valid VoteInstructionType's\n */\n\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteInit()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('voteAuthorizationType')])\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  }\n});\n/**\n * VoteAuthorize type\n */\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\n\nconst VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Vote program\n */\n\nclass VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Vote program\n   */\n\n  /**\n   * Generate an Initialize instruction.\n   */\n\n\n  static initializeAccount(params) {\n    const {\n      votePubkey,\n      nodePubkey,\n      voteInit\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(voteInit.authorizedWithdrawer.toBuffer()),\n        commission: voteInit.commission\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: nodePubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n\n\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.votePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.initializeAccount({\n      votePubkey: params.votePubkey,\n      nodePubkey: params.voteInit.nodePubkey,\n      voteInit: params.voteInit\n    }));\n  }\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n\n\n  static authorize(params) {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n\n\n  static withdraw(params) {\n    const {\n      votePubkey,\n      authorizedWithdrawerPubkey,\n      lamports,\n      toPubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n\n\n  static safeWithdraw(params, currentVoteAccountBalance, rentExemptMinimum) {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error('Withdraw will leave vote account with insuffcient funds.');\n    }\n\n    return VoteProgram.withdraw(params);\n  }\n\n}\n\nVoteProgram.programId = new PublicKey('Vote111111111111111111111111111111111111111');\nVoteProgram.space = 3731;\nconst VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');\n/**\n * @internal\n */\n\nconst InfoString = type({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string())\n});\n/**\n * ValidatorInfo class\n */\n\nclass ValidatorInfo {\n  /**\n   * validator public key\n   */\n\n  /**\n   * validator information\n   */\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key, info) {\n    this.key = void 0;\n    this.info = void 0;\n    this.key = key;\n    this.info = info;\n  }\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n\n\n  static fromConfigData(buffer) {\n    let byteArray = [...buffer];\n    const configKeyCount = decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n    const configKeys = [];\n\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({\n        publicKey,\n        isSigner\n      });\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo);\n        assert$1(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n\n}\n\nconst VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\n\nconst VoteAccountLayout = BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission'), BufferLayout.nu64(), // votes.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.u32('confirmationCount')]), BufferLayout.offset(BufferLayout.u32(), -8), 'votes'), BufferLayout.u8('rootSlotValid'), BufferLayout.nu64('rootSlot'), BufferLayout.nu64(), // authorizedVoters.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), publicKey('authorizedVoter')]), BufferLayout.offset(BufferLayout.u32(), -8), 'authorizedVoters'), BufferLayout.struct([BufferLayout.seq(BufferLayout.struct([publicKey('authorizedPubkey'), BufferLayout.nu64('epochOfLastAuthorizedSwitch'), BufferLayout.nu64('targetEpoch')]), 32, 'buf'), BufferLayout.nu64('idx'), BufferLayout.u8('isEmpty')], 'priorVoters'), BufferLayout.nu64(), // epochCredits.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), BufferLayout.nu64('credits'), BufferLayout.nu64('prevCredits')]), BufferLayout.offset(BufferLayout.u32(), -8), 'epochCredits'), BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')], 'lastTimestamp')]);\n/**\n * VoteAccount class\n */\n\nclass VoteAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.nodePubkey = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.rootSlot = void 0;\n    this.votes = void 0;\n    this.authorizedVoters = void 0;\n    this.priorVoters = void 0;\n    this.epochCredits = void 0;\n    this.lastTimestamp = void 0;\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n\n\n  static fromAccountData(buffer) {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n    let rootSlot = va.rootSlot;\n\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp\n    });\n  }\n\n}\n\nfunction parseAuthorizedVoter(_ref10) {\n  let {\n    authorizedVoter,\n    epoch\n  } = _ref10;\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter)\n  };\n}\n\nfunction parsePriorVoters(_ref11) {\n  let {\n    authorizedPubkey,\n    epochOfLastAuthorizedSwitch,\n    targetEpoch\n  } = _ref11;\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch\n  };\n}\n\nfunction getPriorVoters(_ref12) {\n  let {\n    buf,\n    idx,\n    isEmpty\n  } = _ref12;\n\n  if (isEmpty) {\n    return [];\n  }\n\n  return [...buf.slice(idx + 1).map(parsePriorVoters), ...buf.slice(0, idx).map(parsePriorVoters)];\n}\n\nconst endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/'\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/'\n  }\n};\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\n\nfunction clusterApiUrl(cluster, tls) {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n\n  return url;\n}\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {BlockheightBasedTransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\n// eslint-disable-next-line no-redeclare\n\n\nasync function sendAndConfirmRawTransaction(connection, rawTransaction, confirmationStrategyOrConfirmOptions, maybeConfirmOptions) {\n  let confirmationStrategy;\n  let options;\n\n  if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'lastValidBlockHeight')) {\n    confirmationStrategy = confirmationStrategyOrConfirmOptions;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions;\n  }\n\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendRawTransaction(rawTransaction, sendOptions);\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy ? connection.confirmTransaction(confirmationStrategy, commitment) : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n\n  if (status.err) {\n    throw new Error(`Raw transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n\n  return signature;\n}\n/**\n * There are 1-billion lamports in one SOL\n */\n\n\nconst LAMPORTS_PER_SOL = 1000000000;\nexport { Account, AddressLookupTableAccount, AddressLookupTableInstruction, AddressLookupTableProgram, Authorized, BLOCKHASH_CACHE_TIMEOUT_MS, BPF_LOADER_DEPRECATED_PROGRAM_ID, BPF_LOADER_PROGRAM_ID, BpfLoader, COMPUTE_BUDGET_INSTRUCTION_LAYOUTS, ComputeBudgetInstruction, ComputeBudgetProgram, Connection, Ed25519Program, Enum, EpochSchedule, FeeCalculatorLayout, Keypair, LAMPORTS_PER_SOL, LOOKUP_TABLE_INSTRUCTION_LAYOUTS, Loader, Lockup, MAX_SEED_LENGTH, Message, MessageV0, NONCE_ACCOUNT_LENGTH, NonceAccount, PACKET_DATA_SIZE, PUBLIC_KEY_LENGTH, PublicKey, SIGNATURE_LENGTH_IN_BYTES, SOLANA_SCHEMA, STAKE_CONFIG_ID, STAKE_INSTRUCTION_LAYOUTS, SYSTEM_INSTRUCTION_LAYOUTS, SYSVAR_CLOCK_PUBKEY, SYSVAR_EPOCH_SCHEDULE_PUBKEY, SYSVAR_INSTRUCTIONS_PUBKEY, SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY, SYSVAR_REWARDS_PUBKEY, SYSVAR_SLOT_HASHES_PUBKEY, SYSVAR_SLOT_HISTORY_PUBKEY, SYSVAR_STAKE_HISTORY_PUBKEY, Secp256k1Program, SendTransactionError, SolanaJSONRPCError, SolanaJSONRPCErrorCode, StakeAuthorizationLayout, StakeInstruction, StakeProgram, Struct, SystemInstruction, SystemProgram, Transaction, TransactionExpiredBlockheightExceededError, TransactionExpiredTimeoutError, TransactionInstruction, TransactionStatus, VALIDATOR_INFO_KEY, VERSION_PREFIX_MASK, VOTE_PROGRAM_ID, ValidatorInfo, VersionedMessage, VersionedTransaction, VoteAccount, VoteAuthorizationLayout, VoteInit, VoteInstruction, VoteProgram, clusterApiUrl, sendAndConfirmRawTransaction, sendAndConfirmTransaction };","map":{"version":3,"mappings":"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","names":["ed25519","utils","sha512Sync","sha512","concatBytes","generatePrivateKey","randomPrivateKey","generateKeypair","privateScalar","publicKey","getPublicKey","secretKey","Uint8Array","set","sync","isOnCurve","Point","fromHex","sign","message","slice","verify","toBuffer","arr","Buffer","isBuffer","from","buffer","byteOffset","byteLength","Struct","constructor","properties","Object","assign","encode","serialize","SOLANA_SCHEMA","decode","data","deserialize","decodeUnchecked","deserializeUnchecked","Enum","enum","keys","length","Error","map","key","Map","MAX_SEED_LENGTH","PUBLIC_KEY_LENGTH","isPublicKeyData","value","_bn","undefined","PublicKey","decoded","bs58","BN","equals","eq","toBase58","toBytes","toJSON","b","toArrayLike","zeroPad","alloc","copy","toString","createWithSeed","fromPublicKey","seed","programId","concat","publicKeyBytes","sha256","createProgramAddressSync","seeds","forEach","TypeError","createProgramAddress","findProgramAddressSync","nonce","address","seedsWithNonce","err","findProgramAddress","pubkeyData","pubkey","default","kind","fields","Account","_publicKey","_secretKey","secretKeyBuffer","BPF_LOADER_DEPRECATED_PROGRAM_ID","PACKET_DATA_SIZE","VERSION_PREFIX_MASK","SIGNATURE_LENGTH_IN_BYTES","TransactionExpiredBlockheightExceededError","signature","defineProperty","prototype","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","property","BufferLayout","blob","rustString","rsl","struct","u32","offset","_decode","bind","_encode","rslShim","str","chars","span","authorized","lockup","ns64","voteInit","u8","getAlloc","type","getItemAlloc","item","field","Array","isArray","elementLayout","layout","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","push","Message","args","header","accountKeys","recentBlockhash","instructions","indexToProgramIds","account","ix","programIdIndex","version","staticAccountKeys","compiledInstructions","accountKeyIndexes","accounts","addressTableLookups","isAccountSigner","index","numRequiredSignatures","isAccountWritable","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","isProgramId","has","programIds","values","nonProgramIds","filter","_","numKeys","keyCount","shortvec","instruction","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","seq","signDataLayout","Layout","transaction","signData","byteArray","accountCount","i","dataSlice","messageArgs","condition","MessageV0","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","MESSAGE_VERSION_0_PREFIX","serializedMessageLength","prefix","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","lookup","encodedWritableIndexesLength","writableIndexes","encodedReadonlyIndexesLength","readonlyIndexes","addressTableLookupLayout","accountKey","maskedPrefix","assert","splice","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","VersionedMessage","deserializeMessageVersion","TransactionStatus","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","isSigner","isWritable","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","_message","_json","hasOwnProperty","call","blockhash","nonceInstruction","signers","add","items","compileMessage","JSON","stringify","console","warn","accountMetas","accountMeta","includes","uniqueMetas","pubkeyString","uniqueIndex","findIndex","x","sort","y","localeCompare","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","indexOf","meta","invariant","keyIndex","_compile","valid","every","pair","serializeMessage","getEstimatedFee","connection","getFeeForMessage","setSigners","seen","Set","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","verifySignatures","_verifySignatures","requireAllSignatures","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","VersionedTransaction","defaultSignatures","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","signaturesLength","messageData","signerPubkeys","signerIndex","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","options","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","minContextSlot","sendTransaction","status","confirmTransaction","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","decodeData","FeeCalculatorLayout","nu64","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","encodeDecode","bigInt","bigIntLayout","src","toBigIntLE","toBufferLE","u64","SystemInstruction","decodeInstructionType","checkProgramId","instructionTypeLayout","typeIndex","ixType","entries","SYSTEM_INSTRUCTION_LAYOUTS","decodeCreateAccount","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","decodeTransfer","Transfer","toPubkey","decodeTransferWithSeed","TransferWithSeed","basePubkey","decodeAllocate","Allocate","accountPubkey","decodeAllocateWithSeed","base","AllocateWithSeed","decodeAssign","Assign","decodeAssignWithSeed","AssignWithSeed","decodeCreateWithSeed","CreateWithSeed","decodeNonceInitialize","InitializeNonceAccount","noncePubkey","decodeNonceAdvance","AdvanceNonceAccount","decodeNonceWithdraw","WithdrawNonceAccount","decodeNonceAuthorize","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","UpgradeNonceAccount","createAccount","params","transfer","BigInt","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","Loader","getMinNumSignatures","Math","ceil","chunkSize","load","payer","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","error","owner","dataLayout","array","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","BPF_LOADER_PROGRAM_ID","BpfLoader","elf","loaderProgramId","objToString","objKeys","obj","name","val","isArrayProp","max","propVal","toStr","isFinite","fastStableStringify","returnVal","MINIMUM_SLOT_PER_EPOCH","trailingZeros","n","nextPowerOfTwo","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","epochLen","getSlotsInEpoch","slotIndex","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","SendTransactionError","logs","SolanaJSONRPCErrorCode","JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP","JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE","JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY","JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_NO_SNAPSHOT","JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX","JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE","JSON_RPC_SCAN_ERROR","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH","JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET","JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION","JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED","SolanaJSONRPCError","customMessage","code","globalThis","fetch","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","LOOKUP_TABLE_META_SIZE","AddressLookupTableAccount","state","isActive","U64_MAX","deactivationSlot","accountData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","addresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","makeWebsocketUrl","endpoint","matches","match","hostish","portWithColon","rest","protocol","startsWith","startPort","parseInt","websocketPort","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","assertEndpointUrl","putativeUrl","test","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","createRpcResult","result","union","pick","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","create","jsonRpcResultAndContext","context","number","notificationResultAndContext","versionedMessageFromResponse","response","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","createRpcClient","url","httpHeaders","customFetch","fetchMiddleware","disableRetryOnRateLimit","fetchImpl","fetchWithMiddleware","info","init","modifiedFetchArgs","reject","modifiedInfo","modifiedInit","clientBrowser","RpcClient","request","callback","agent","method","body","headers","COMMON_HTTP_HEADERS","too_many_requests_retries","res","waitTime","log","statusText","text","ok","createRpcRequest","client","createRpcBatchRequest","requests","batch","methodName","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","writable","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","readonly","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","process","Connection","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","wsEndpoint","confirmTransactionInitialTimeout","RpcWebSocketClient","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","getBalanceAndContext","_buildArgs","unsafeRes","getBalance","then","catch","e","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","configArg","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getMultipleAccountsInfoAndContext","publicKeys","getMultipleAccountsInfo","getStakeActivation","getProgramAccounts","configOrCommitment","encoding","configWithoutEncoding","getParsedProgramAccounts","strategy","rawSignature","decodedSignature","subscriptionCommitment","timeoutId","subscriptionId","done","confirmationPromise","onSignature","__type","PROCESSED","expiryPromise","timeoutMs","TIMED_OUT","checkBlockHeight","getBlockHeight","_e","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","outcome","race","clearTimeout","removeSignatureListener","getClusterNodes","getVoteAccounts","getSlot","getSlotLeader","getSlotLeaders","startSlot","limit","getSignatureStatus","getSignatureStatuses","getTransactionCount","getTotalSupply","excludeNonCirculatingAccountsList","getInflationGovernor","getInflationReward","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getRecentBlockhashAndContext","getRecentPerformanceSamples","getFeeCalculatorForBlockhash","wireMessage","getRecentBlockhash","getLatestBlockhash","getLatestBlockhashAndContext","getVersion","getGenesisHash","getBlock","rawConfig","_buildArgsAtLeastConfirmed","getBlockProduction","extra","c","getTransaction","getParsedTransaction","getParsedTransactions","getTransactions","getConfirmedBlock","block","getBlocks","endSlot","getBlockSignatures","transactionDetails","getConfirmedBlockSignatures","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","until","highestConfirmedRoot","before","confirmedSignatureInfo","getConfirmedSignaturesForAddress2","getSignaturesForAddress","getAddressLookupTable","accountInfo","getNonceAndContext","getNonce","requestAirdrop","to","_blockhashWithExpiryBlockHeight","disableCache","timeSinceFetch","Date","now","expired","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getStakeMinimumDelegation","simulateTransaction","transactionOrMessage","includeAccounts","originalTx","encodedTransaction","sigVerify","traceIndent","logTrace","join","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","notify","_updateSubscriptions","clearInterval","hash","close","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","delete","_handleServerNotification","callbackArgs","cb","notification","_makeSubscription","subscriptionConfig","clientSubscriptionId","existingSubscription","onAccountChange","removeAccountChangeListener","_unsubscribeClientSubscription","accountId","onProgramAccountChange","filters","removeProgramAccountChangeListener","onLogs","mentions","removeOnLogsListener","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","removeRootChangeListener","Keypair","keypair","_keypair","generate","fromSecretKey","skipValidation","computedPublicKey","ii","fromSeed","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","bigintLayout","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableInstruction","layoutType","decodeCreateLookupTable","checkKeysLength","recentSlot","Number","decodeExtendLookupTable","lookupTable","decodeCloseLookupTable","recipient","decodeFreezeLookupTable","decodeDeactivateLookupTable","AddressLookupTableProgram","createLookupTable","lookupTableAddress","bumpSeed","freezeLookupTable","extendLookupTable","addr","deactivateLookupTable","closeLookupTable","ComputeBudgetInstruction","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","decodeRequestUnits","units","additionalFee","RequestUnits","decodeRequestHeapFrame","RequestHeapFrame","decodeSetComputeUnitLimit","SetComputeUnitLimit","decodeSetComputeUnitPrice","microLamports","SetComputeUnitPrice","ComputeBudgetProgram","requestUnits","requestHeapFrame","setComputeUnitLimit","setComputeUnitPrice","PRIVATE_KEY_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_BYTES","ED25519_INSTRUCTION_LAYOUT","u16","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","secp256k1","hmacSha256Sync","h","hmac","msgs","msg","update","digest","ecdsaSign","msgHash","privKey","signSync","der","recovered","isValidPrivateKey","publicKeyCreate","ETHEREUM_ADDRESS_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","sha3","keccak_256","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","substr","dataStart","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","decodeInitialize","Initialize","stakePubkey","decodeDelegate","Delegate","decodeAuthorize","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","decodeAuthorizeWithSeed","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","decodeSplit","Split","splitStakePubkey","decodeMerge","Merge","sourceStakePubKey","decodeWithdraw","Withdraw","decodeDeactivate","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","initialize","maybeLockup","delegate","authorize","authorizeWithSeed","splitInstruction","split","splitWithSeed","merge","withdraw","deactivate","VoteInit","authorizedVoter","authorizedWithdrawer","VoteInstruction","VOTE_INSTRUCTION_LAYOUTS","decodeInitializeAccount","InitializeAccount","voteAuthorizationType","authorizedWithdrawerPubkey","VoteProgram","VoteAuthorizationLayout","Voter","initializeAccount","safeWithdraw","currentVoteAccountBalance","rentExemptMinimum","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","ValidatorInfo","fromConfigData","configKeyCount","configKeys","rawInfo","parse","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","votes","authorizedVoters","priorVoters","lastTimestamp","versionOffset","va","rootSlotValid","parseAuthorizedVoter","getPriorVoters","parsePriorVoters","epochOfLastAuthorizedSwitch","targetEpoch","buf","idx","isEmpty","http","devnet","testnet","https","clusterApiUrl","cluster","tls","sendAndConfirmRawTransaction","confirmationStrategyOrConfirmOptions","maybeConfirmOptions","confirmationStrategy","LAMPORTS_PER_SOL"],"sources":["../src/utils/ed25519.ts","../src/utils/to-buffer.ts","../src/utils/borsh-schema.ts","../src/publickey.ts","../src/account.ts","../src/bpf-loader-deprecated.ts","../src/transaction/constants.ts","../src/transaction/expiry-custom-errors.ts","../src/layout.ts","../src/utils/shortvec-encoding.ts","../src/message/legacy.ts","../src/utils/assert.ts","../src/message/v0.ts","../src/message/versioned.ts","../src/transaction/legacy.ts","../src/transaction/versioned.ts","../src/sysvar.ts","../src/utils/send-and-confirm-transaction.ts","../src/utils/sleep.ts","../src/instruction.ts","../src/fee-calculator.ts","../src/nonce-account.ts","../src/utils/bigint.ts","../src/programs/system.ts","../src/loader.ts","../src/bpf-loader.ts","../node_modules/fast-stable-stringify/index.js","../src/epoch-schedule.ts","../src/errors.ts","../src/__forks__/browser/fetch-impl.ts","../src/timing.ts","../src/account-data.ts","../src/programs/address-lookup-table/state.ts","../src/utils/makeWebsocketUrl.ts","../src/connection.ts","../src/keypair.ts","../src/programs/address-lookup-table/index.ts","../src/programs/compute-budget.ts","../src/programs/ed25519.ts","../src/utils/secp256k1.ts","../src/programs/secp256k1.ts","../src/programs/stake.ts","../src/programs/vote.ts","../src/validator-info.ts","../src/vote-account.ts","../src/utils/cluster.ts","../src/utils/send-and-confirm-raw-transaction.ts","../src/index.ts"],"sourcesContent":["import {sha512} from '@noble/hashes/sha512';\nimport * as ed25519 from '@noble/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\ned25519.utils.sha512Sync = (...m) => sha512(ed25519.utils.concatBytes(...m));\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.sync.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.Point.fromHex(publicKey, true /* strict */);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sync.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sync.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.sync.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {Buffer} from 'buffer';\n\nimport {generatePrivateKey, getPublicKey} from './utils/ed25519';\nimport {toBuffer} from './utils/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  private _publicKey: Buffer;\n  /** @internal */\n  private _secretKey: Buffer;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey(): Buffer {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {Message} from './legacy';\nimport {MessageV0} from './v0';\n\nexport type VersionedMessage = Message | MessageV0;\n// eslint-disable-next-line no-redeclare\nexport const VersionedMessage = {\n  deserializeMessageVersion(serializedMessage: Uint8Array): 'legacy' | number {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n\n  deserialize: (serializedMessage: Uint8Array): VersionedMessage => {\n    const version =\n      VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\n        `Transaction message version ${version} deserialization is not supported`,\n      );\n    }\n  },\n};\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?: TransactionBlockhashCtor | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBuffer())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {Signer} from '../keypair';\nimport assert from '../utils/assert';\nimport {VersionedMessage} from '../message/versioned';\nimport {SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport * as Layout from '../layout';\nimport {sign} from '../utils/ed25519';\n\nexport type TransactionVersion = 'legacy' | 0;\n\n/**\n * Versioned transaction class\n */\nexport class VersionedTransaction {\n  signatures: Array<Uint8Array>;\n  message: VersionedMessage;\n\n  constructor(message: VersionedMessage, signatures?: Array<Uint8Array>) {\n    if (signatures !== undefined) {\n      assert(\n        signatures.length === message.header.numRequiredSignatures,\n        'Expected signatures length to be equal to the number of required signatures',\n      );\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n\n  serialize(): Uint8Array {\n    const serializedMessage = this.message.serialize();\n\n    const encodedSignaturesLength = Array<number>();\n    shortvec.encodeLength(encodedSignaturesLength, this.signatures.length);\n\n    const transactionLayout = BufferLayout.struct<{\n      encodedSignaturesLength: Uint8Array;\n      signatures: Array<Uint8Array>;\n      serializedMessage: Uint8Array;\n    }>([\n      BufferLayout.blob(\n        encodedSignaturesLength.length,\n        'encodedSignaturesLength',\n      ),\n      BufferLayout.seq(\n        Layout.signature(),\n        this.signatures.length,\n        'signatures',\n      ),\n      BufferLayout.blob(serializedMessage.length, 'serializedMessage'),\n    ]);\n\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode(\n      {\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage,\n      },\n      serializedTransaction,\n    );\n\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction: Uint8Array): VersionedTransaction {\n    let byteArray = [...serializedTransaction];\n\n    const signatures = [];\n    const signaturesLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(\n        new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)),\n      );\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers: Array<Signer>) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey =>\n        pubkey.equals(signer.publicKey),\n      );\n      assert(\n        signerIndex >= 0,\n        `Cannot sign with non signer key ${signer.publicKey.toBase58()}`,\n      );\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status =\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n      ? (\n          await connection.confirmTransaction(\n            {\n              signature: signature,\n              blockhash: transaction.recentBlockhash,\n              lastValidBlockHeight: transaction.lastValidBlockHeight,\n            },\n            options && options.commitment,\n          )\n        ).value\n      : (\n          await connection.confirmTransaction(\n            signature,\n            options && options.commitment,\n          )\n        ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  typeof SolanaJSONRPCErrorCode[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = 2n ** 64n - 1n;\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy = {\n  signature: TransactionSignature;\n} & BlockhashWithExpiryBlockHeight;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(url.startsWith('https:') /* useHttps */);\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: BlockheightBasedTransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` using a `TransactionConfirmationConfig` */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy:\n      | BlockheightBasedTransactionConfirmationStrategy\n      | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config =\n        strategy as BlockheightBasedTransactionConfirmationStrategy;\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const subscriptionCommitment = commitment || this.commitment;\n    let timeoutId;\n    let subscriptionId;\n    let done = false;\n\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          rawSignature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            done = true;\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    const expiryPromise = new Promise<\n      | {__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED}\n      | {__type: TransactionStatus.TIMED_OUT; timeoutMs: number}\n    >(resolve => {\n      if (typeof strategy === 'string') {\n        let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n        switch (subscriptionCommitment) {\n          case 'processed':\n          case 'recent':\n          case 'single':\n          case 'confirmed':\n          case 'singleGossip': {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n          // exhaust enums to ensure full coverage\n          case 'finalized':\n          case 'max':\n          case 'root':\n        }\n\n        timeoutId = setTimeout(\n          () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n          timeoutMs,\n        );\n      } else {\n        let config =\n          strategy as BlockheightBasedTransactionConfirmationStrategy;\n        const checkBlockHeight = async () => {\n          try {\n            const blockHeight = await this.getBlockHeight(commitment);\n            return blockHeight;\n          } catch (_e) {\n            return -1;\n          }\n        };\n        (async () => {\n          let currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n          while (currentBlockHeight <= config.lastValidBlockHeight) {\n            await sleep(1000);\n            if (done) return;\n            currentBlockHeight = await checkBlockHeight();\n            if (done) return;\n          }\n          resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n        })();\n      }\n    });\n\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      switch (outcome.__type) {\n        case TransactionStatus.BLOCKHEIGHT_EXCEEDED:\n          throw new TransactionExpiredBlockheightExceededError(rawSignature);\n        case TransactionStatus.PROCESSED:\n          result = outcome.response;\n          break;\n        case TransactionStatus.TIMED_OUT:\n          throw new TransactionExpiredTimeoutError(\n            rawSignature,\n            outcome.timeoutMs / 1000,\n          );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: Message,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const wireMessage = message.serialize().toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result as unknown as RpcResponseAndContext<number>;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta, version}) => ({\n        meta,\n        transaction: {\n          ...transaction,\n          message: versionedMessageFromResponse(version, transaction.message),\n        },\n        version,\n      })),\n    };\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(\n    commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block height information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration++;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._subscriptionsByHash[hash] = {\n        ...subscription,\n        state: 'pending',\n      };\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'subscribing',\n                };\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                };\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'pending',\n                };\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._subscriptionsByHash[hash] = {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  };\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._subscriptionsByHash[hash] = {\n                      ...subscription,\n                      state: 'subscribed',\n                    };\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'unsubscribed',\n                };\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {hmac} from '@noble/hashes/hmac';\nimport {sha256} from '@noble/hashes/sha256';\nimport * as secp256k1 from '@noble/secp256k1';\n\n// Supply a synchronous hashing algorithm to make this\n// library interoperable with the synchronous APIs in web3.js.\nsecp256k1.utils.hmacSha256Sync = (key: Uint8Array, ...msgs: Uint8Array[]) => {\n  const h = hmac.create(sha256, key);\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.signSync>[0],\n  privKey: Parameters<typeof secp256k1.signSync>[1],\n) => secp256k1.signSync(msgHash, privKey, {der: false, recovered: true});\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport sha3 from 'js-sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(\n        sha3.keccak_256.update(toBuffer(publicKey)).digest(),\n      ).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        sha3.keccak_256.update(toBuffer(message)).digest(),\n      );\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'InitializeAccount' | 'Withdraw';\n\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","import type {Buffer} from 'buffer';\n\nimport {\n  BlockheightBasedTransactionConfirmationStrategy,\n  Connection,\n} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {BlockheightBasedTransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategy: BlockheightBasedTransactionConfirmationStrategy,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategyOrConfirmOptions:\n    | BlockheightBasedTransactionConfirmationStrategy\n    | ConfirmOptions\n    | undefined,\n  maybeConfirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  let confirmationStrategy:\n    | BlockheightBasedTransactionConfirmationStrategy\n    | undefined;\n  let options: ConfirmOptions | undefined;\n  if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'lastValidBlockHeight',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as BlockheightBasedTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions as\n      | ConfirmOptions\n      | undefined;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy\n    ? connection.confirmTransaction(confirmationStrategy, commitment)\n    : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './errors';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './programs';\nexport * from './publickey';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './utils';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"]},"metadata":{},"sourceType":"module"}